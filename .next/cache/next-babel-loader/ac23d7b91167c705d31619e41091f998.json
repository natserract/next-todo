{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/natserract/Projects/todolist-s/pages/activity.tsx\";\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport ActivityCard from \"../components/activity-card\";\nimport ActivityHeader from \"../components/activity-header\";\nimport Loading from \"../components/loading\";\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport EmptyItems from \"../components/empty-items\";\nimport { get, remove } from '../api/API';\nimport { ACTIVITY_GROUPS } from '../constant/api';\nimport { parseDate } from \"../utils/utils\";\nimport { useRefetch } from \"../hooks/useRefetch\";\nconst useStyles = makeStyles({});\n\nconst Activity = () => {\n  const classes = useStyles();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: data,\n    1: setData\n  } = useState([]);\n  const {\n    doRefetch,\n    setDoRefetch\n  } = useRefetch();\n\n  const fetchData = () => {\n    const url = ACTIVITY_GROUPS + '?email=notfound@gmail.com';\n\n    const onFetch = async () => {\n      try {\n        const responses = await get(url);\n        setData(responses === null || responses === void 0 ? void 0 : responses.data);\n        setLoading(false);\n      } catch (error) {\n        setLoading(true);\n      }\n    };\n\n    onFetch();\n  };\n\n  useEffect(fetchData, []);\n  const handleDelete = useCallback(id => {\n    const url = ACTIVITY_GROUPS + `/${id}`;\n\n    const onDelete = async () => {\n      setLoading(true);\n\n      try {\n        const responses = await remove(url);\n        setDoRefetch(true); // setData(responses?.data)\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    onDelete();\n  }, []);\n  const renderActivityItems = useCallback(() => {\n    if (loading) return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 25\n    }, this);\n    if (!data && !data.length) return /*#__PURE__*/_jsxDEV(EmptyItems, {\n      type: \"activity\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this);\n    return data.map((item, index) => /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      sm: 3,\n      children: /*#__PURE__*/_jsxDEV(ActivityCard, {\n        title: item.title,\n        date: parseDate(item.created_at),\n        onDelete: () => handleDelete(item.id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, `item-${item.id}-${index}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this));\n  }, [data, loading]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    role: \"activity\",\n    children: [/*#__PURE__*/_jsxDEV(ActivityHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      alignItems: \"stretch\",\n      children: renderActivityItems()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Activity;","map":{"version":3,"sources":["/Users/natserract/Projects/todolist-s/pages/activity.tsx"],"names":["React","useState","useCallback","useEffect","ActivityCard","ActivityHeader","Loading","Grid","makeStyles","EmptyItems","get","remove","ACTIVITY_GROUPS","parseDate","useRefetch","useStyles","Activity","classes","loading","setLoading","data","setData","doRefetch","setDoRefetch","fetchData","url","onFetch","responses","error","handleDelete","id","onDelete","console","renderActivityItems","length","map","item","index","title","created_at"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\"\nimport ActivityCard from \"../components/activity-card\"\nimport ActivityHeader from \"../components/activity-header\"\nimport Loading from \"../components/loading\"\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport EmptyItems from \"../components/empty-items\";\nimport { get, remove } from '../api/API'\nimport { ACTIVITY_GROUPS } from '../constant/api'\nimport { parseDate } from \"../utils/utils\";\nimport { useRefetch } from \"../hooks/useRefetch\";\n\nconst useStyles = makeStyles(({}))\n\nconst Activity = () => {\n  const classes = useStyles()\n\n  const [loading, setLoading] = useState(true)\n  const [data, setData] = useState([])\n  const { doRefetch, setDoRefetch } = useRefetch()\n\n  const fetchData = () => {\n    const url = ACTIVITY_GROUPS + '?email=notfound@gmail.com'\n\n    const onFetch = async () => {\n      try {\n        const responses = await get(url)\n        setData(responses?.data)\n        setLoading(false)\n       } catch (error) {\n        setLoading(true)\n       }\n    }\n    \n    onFetch()\n  }\n\n  useEffect(fetchData, []);\n\n  const handleDelete = useCallback((id: string) => {\n    const url = ACTIVITY_GROUPS + `/${id}`\n    \n    const onDelete = async () => {\n      setLoading(true)\n\n      try {\n        const responses = await remove(url)\n        setDoRefetch(true)\n        // setData(responses?.data)\n       } catch (error) {\n        console.error(error)\n       }\n    }\n    \n    onDelete()\n  }, [])\n\n  const renderActivityItems = useCallback(() => {\n    if (loading) return <Loading />\n\n    if (!data && !data.length) return (\n      <EmptyItems type=\"activity\" />\n    )\n\n    return data.map((item, index) => \n      <Grid item xs={12} sm={3} key={`item-${item.id}-${index}`}>\n        <ActivityCard\n          title={item.title}\n          date={parseDate(item.created_at)}\n          onDelete={() => handleDelete(item.id)}\n        />\n      </Grid>\n    )\n  }, [data, loading])\n\n  return (\n    <div role=\"activity\">\n      <ActivityHeader />\n\n      <Grid container spacing={3} alignItems=\"stretch\">\n        {renderActivityItems()}\n      </Grid>\n    </div>\n  )\n}\n\nexport default Activity"]},"metadata":{},"sourceType":"module"}