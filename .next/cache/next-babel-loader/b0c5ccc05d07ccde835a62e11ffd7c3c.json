{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/natserract/Projects/todolist-s/components/activity-header/popup.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\nimport styles from './styles';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport * as yup from 'yup';\nimport { useFormik } from 'formik';\nvar validationSchema = yup.object({\n  activityName: yup.string().required()\n});\nvar useStyles = makeStyles(styles);\n\nvar ActivityPopup = function ActivityPopup(props) {\n  _s();\n\n  var classes = useStyles();\n  var formik = useFormik({\n    initialValues: {\n      activityName: ''\n    },\n    validationSchema: validationSchema,\n    onSubmit: function onSubmit(values) {\n      var activityName = values.activityName;\n      console.log('submitted', activityName);\n    }\n  }); // const [formInput, setFormInput] = useReducer(\n  //   (state, newState) => ({ ...state, ...newState }),\n  //   {\n  //     activityName: \"\",\n  //   }\n  // );\n\n  var handleClose = function handleClose() {\n    props.setOpenDialog(false);\n  }; // const resetInput = () => {\n  //   setFormInput({\n  //     'activityName': null\n  //   });\n  // }\n  // const handleSubmit = evt => {\n  //   evt.preventDefault();\n  //   // if (formInput?.comment) {\n  //   //   setCommentsValue({\n  //   //     text: formInput?.comment,\n  //   //     stateLocation,\n  //   //     photoId\n  //   //   })\n  //   //   resetInput()\n  //   // }\n  // };\n  // const handleInput = evt => {\n  //   const name = evt.target.name;\n  //   const newValue = evt.target.value;\n  //   setFormInput({ [name]: newValue });\n  // };\n\n\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    className: classes.dialog,\n    open: props.openDialog,\n    onClose: handleClose,\n    \"aria-labelledby\": \"form-dialog-title\",\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      id: \"form-dialog-title\",\n      className: classes.dialogTitle,\n      children: [\"Tambah Activity\", /*#__PURE__*/_jsxDEV(IconButton, {\n        \"aria-label\": \"close\",\n        className: classes.closeButton,\n        onClick: handleClose,\n        children: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      dividers: true,\n      className: classes.dialogContent,\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: formik.handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.formGroup,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"activityName\",\n            children: \"Nama Activity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(TextField, {\n            rows: 4,\n            name: \"activityName\",\n            placeholder: \"Tambahkan nama activity\",\n            value: formik.values.activityName,\n            variant: \"outlined\",\n            onChange: formik.handleChange,\n            onBlur: formik.handleBlur,\n            className: \"\".concat(formik.errors.activityName && formik.touched.activityName ? \"input-error\" : null, \" \").concat(classes.activityNameInput),\n            autoComplete: \"off\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, _this), formik.errors.activityName && formik.touched.activityName && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: classes.error,\n            children: \"Activity Name is Required\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        onClick: function onClick() {\n          return formik.handleSubmit();\n        },\n        variant: \"contained\",\n        color: \"primary\",\n        children: \"Simpan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(ActivityPopup, \"C5g7rQO6GJW4fOIoJxJdUVhrL6g=\", false, function () {\n  return [useStyles, useFormik];\n});\n\n_c = ActivityPopup;\nexport default ActivityPopup;\n\nvar _c;\n\n$RefreshReg$(_c, \"ActivityPopup\");","map":{"version":3,"sources":["/Users/natserract/Projects/todolist-s/components/activity-header/popup.tsx"],"names":["React","makeStyles","TextField","Dialog","Button","styles","DialogTitle","DialogContent","DialogActions","IconButton","CloseIcon","yup","useFormik","validationSchema","object","activityName","string","required","useStyles","ActivityPopup","props","classes","formik","initialValues","onSubmit","values","console","log","handleClose","setOpenDialog","dialog","openDialog","dialogTitle","closeButton","dialogContent","handleSubmit","formGroup","handleChange","handleBlur","errors","touched","activityNameInput","error"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\nimport { makeStyles } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\nimport styles from './styles'\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport * as yup from 'yup';\nimport { useFormik } from 'formik';\n\ntype Props = {\n  openDialog: boolean;\n  setOpenDialog: Function;\n}\n\nconst validationSchema = yup.object({\n  activityName: yup.string().required(),\n});\n\n\nconst useStyles = makeStyles(styles);\n\nconst ActivityPopup: React.FC<Props> = (props) => {\n  const classes = useStyles()\n\n  const formik = useFormik({\n    initialValues: {\n      activityName: '',\n    },\n    validationSchema,\n    onSubmit: (values) => {\n      const { activityName } = values\n\n      console.log('submitted', activityName)\n    },\n  })\n\n  // const [formInput, setFormInput] = useReducer(\n  //   (state, newState) => ({ ...state, ...newState }),\n  //   {\n  //     activityName: \"\",\n  //   }\n  // );\n\n  const handleClose = () => {\n    props.setOpenDialog(false);\n  };\n\n  // const resetInput = () => {\n  //   setFormInput({\n  //     'activityName': null\n  //   });\n  // }\n\n  // const handleSubmit = evt => {\n  //   evt.preventDefault();\n\n\n  //   // if (formInput?.comment) {\n  //   //   setCommentsValue({\n  //   //     text: formInput?.comment,\n  //   //     stateLocation,\n  //   //     photoId\n  //   //   })\n\n  //   //   resetInput()\n  //   // }\n  // };\n\n\n  // const handleInput = evt => {\n  //   const name = evt.target.name;\n  //   const newValue = evt.target.value;\n  //   setFormInput({ [name]: newValue });\n  // };\n\n  return (\n    <Dialog className={classes.dialog} open={props.openDialog} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n      <DialogTitle id=\"form-dialog-title\" className={classes.dialogTitle}>\n        Tambah Activity\n\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={handleClose}>\n          <CloseIcon />\n        </IconButton>\n      </DialogTitle>\n\n      <DialogContent dividers className={classes.dialogContent}>\n        <form onSubmit={formik.handleSubmit}>\n          <div className={classes.formGroup}>\n            <label htmlFor=\"activityName\">Nama Activity</label>\n            <TextField\n              rows={4}\n              name=\"activityName\"\n              placeholder=\"Tambahkan nama activity\"\n              value={formik.values.activityName}\n              variant=\"outlined\"\n              onChange={formik.handleChange}\n              onBlur={formik.handleBlur}\n              className={\n                `${formik.errors.activityName && formik.touched.activityName ? \"input-error\" : null} ${classes.activityNameInput}`\n              }\n              autoComplete=\"off\"\n              required\n            />\n            {formik.errors.activityName && formik.touched.activityName && (\n              <span className={classes.error}>Activity Name is Required</span>\n            )}\n          </div>\n        </form>\n      </DialogContent>\n\n      <DialogActions>\n        <Button type=\"submit\" onClick={() => formik.handleSubmit()} variant=\"contained\" color=\"primary\">\n          Simpan\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default ActivityPopup"]},"metadata":{},"sourceType":"module"}