{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { TodoActionTypes } from '../../actions/todos';\nimport setWith from 'lodash.setwith';\nexport var initialTodoState = {};\n\nvar addTodo = function addTodo(action, state) {\n  var todoId = action.id;\n  var todoUserName = action.userName;\n  var todoContent = action.content;\n\n  var data = _objectSpread({}, state);\n\n  var key = \"[\".concat(todoUserName, \"]['allIds'][\").concat(todoId, \"]\");\n  setWith(data, key, _objectSpread({}, todoContent), Object);\n  state = _objectSpread({}, data);\n  return _objectSpread({}, state);\n};\n\nvar setTodo = function setTodo(action, state) {\n  var todoId = action.id;\n  var todoUserName = action.userName;\n  var todoStatus = action.status;\n  state[todoUserName]['allIds'][todoId]['status'] = todoStatus;\n  return _objectSpread({}, state);\n};\n\nvar deleteTodo = function deleteTodo(action, state) {\n  var todoId = action.id;\n  var todoUserName = action.userName;\n  delete state[todoUserName].allIds[todoId];\n  return _objectSpread({}, state);\n};\n\nvar viewTodo = function viewTodo(action, state) {\n  var _state$todoUserName;\n\n  var todoId = action.id;\n  var todoUserName = action.userName;\n\n  var byId = _objectSpread({}, (_state$todoUserName = state[todoUserName]) === null || _state$todoUserName === void 0 ? void 0 : _state$todoUserName.allIds[todoId]);\n\n  return _defineProperty({}, todoUserName, _objectSpread({\n    byId: byId\n  }, state[todoUserName]));\n};\n\nexport var todosReducer = function todosReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialTodoState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case TodoActionTypes.ADD_TODO:\n      {\n        return addTodo(action, state);\n      }\n\n    case TodoActionTypes.SET_TODO:\n      {\n        return setTodo(action, state);\n      }\n\n    case TodoActionTypes.DELETE_TODO:\n      {\n        return deleteTodo(action, state);\n      }\n\n    case TodoActionTypes.VIEW_TODO:\n      {\n        return viewTodo(action, state);\n      }\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/natserract/Projects/todolist-s/store/reducers/todos/index.ts"],"names":["TodoActionTypes","setWith","initialTodoState","addTodo","action","state","todoId","id","todoUserName","userName","todoContent","content","data","key","Object","setTodo","todoStatus","status","deleteTodo","allIds","viewTodo","byId","todosReducer","type","ADD_TODO","SET_TODO","DELETE_TODO","VIEW_TODO"],"mappings":";;;;;;AACA,SAASA,eAAT,QAAkF,qBAAlF;AAEA,OAAOC,OAAP,MAAoB,gBAApB;AAEA,OAAO,IAAMC,gBAA4B,GAAG,EAArC;;AAEP,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,MAAD,EAAkBC,KAAlB,EAAoD;AAClE,MAAMC,MAAM,GAAGF,MAAM,CAACG,EAAtB;AACA,MAAMC,YAAY,GAAGJ,MAAM,CAACK,QAA5B;AACA,MAAMC,WAAW,GAAGN,MAAM,CAACO,OAA3B;;AAEA,MAAMC,IAAI,qBAAQP,KAAR,CAAV;;AACA,MAAMQ,GAAG,cAAOL,YAAP,yBAAkCF,MAAlC,MAAT;AACAL,EAAAA,OAAO,CAACW,IAAD,EAAOC,GAAP,oBAAiBH,WAAjB,GAAgCI,MAAhC,CAAP;AAEAT,EAAAA,KAAK,qBAAQO,IAAR,CAAL;AAEA,2BACKP,KADL;AAGD,CAdD;;AAgBA,IAAMU,OAAO,GAAG,SAAVA,OAAU,CAACX,MAAD,EAAkBC,KAAlB,EAAoD;AAClE,MAAMC,MAAM,GAAGF,MAAM,CAACG,EAAtB;AACA,MAAMC,YAAY,GAAGJ,MAAM,CAACK,QAA5B;AACA,MAAMO,UAAU,GAAGZ,MAAM,CAACa,MAA1B;AAEAZ,EAAAA,KAAK,CAACG,YAAD,CAAL,CAAoB,QAApB,EAA8BF,MAA9B,EAAsC,QAAtC,IAAkDU,UAAlD;AAEA,2BACKX,KADL;AAGD,CAVD;;AAYA,IAAMa,UAAU,GAAG,SAAbA,UAAa,CAACd,MAAD,EAAqBC,KAArB,EAAuD;AACxE,MAAMC,MAAM,GAAGF,MAAM,CAACG,EAAtB;AACA,MAAMC,YAAY,GAAGJ,MAAM,CAACK,QAA5B;AAEA,SAAOJ,KAAK,CAACG,YAAD,CAAL,CAAoBW,MAApB,CAA2Bb,MAA3B,CAAP;AAEA,2BACKD,KADL;AAGD,CATD;;AAWA,IAAMe,QAAQ,GAAG,SAAXA,QAAW,CAAChB,MAAD,EAAmBC,KAAnB,EAAqD;AAAA;;AACpE,MAAMC,MAAM,GAAGF,MAAM,CAACG,EAAtB;AACA,MAAMC,YAAY,GAAGJ,MAAM,CAACK,QAA5B;;AAEA,MAAMY,IAAI,4CAAQhB,KAAK,CAACG,YAAD,CAAb,wDAAQ,oBAAqBW,MAArB,CAA4Bb,MAA5B,CAAR,CAAV;;AAEA,6BACGE,YADH;AAEIa,IAAAA,IAAI,EAAJA;AAFJ,KAGOhB,KAAK,CAACG,YAAD,CAHZ;AAMD,CAZD;;AAeA,OAAO,IAAMc,YAMZ,GAAG,SANSA,YAMT,GAQa;AAAA,MAPfjB,KAOe,uEAPKH,gBAOL;AAAA,MANfE,MAMe;;AACb,UAAQA,MAAM,CAACmB,IAAf;AACE,SAAKvB,eAAe,CAACwB,QAArB;AAA+B;AAC7B,eAAOrB,OAAO,CAACC,MAAD,EAASC,KAAT,CAAd;AACD;;AACD,SAAKL,eAAe,CAACyB,QAArB;AAA+B;AAC7B,eAAOV,OAAO,CAACX,MAAD,EAASC,KAAT,CAAd;AACD;;AACD,SAAKL,eAAe,CAAC0B,WAArB;AAAkC;AAChC,eAAOR,UAAU,CAACd,MAAD,EAASC,KAAT,CAAjB;AACD;;AACD,SAAKL,eAAe,CAAC2B,SAArB;AAAgC;AAC9B,eAAOP,QAAQ,CAAChB,MAAD,EAASC,KAAT,CAAf;AACD;;AACD;AACE,aAAOA,KAAP;AAdJ;AAgBD,CA/BI","sourcesContent":["import { Reducer } from 'redux';\nimport { TodoActionTypes, AllTodos, AddTodo, SetTodo, DeleteTodo, ViewTodo } from '../../actions/todos';\nimport { TodosState } from './State';\nimport setWith from 'lodash.setwith'\n\nexport const initialTodoState: TodosState = {}\n\nconst addTodo = (action: AddTodo, state: TodosState): TodosState => {\n  const todoId = action.id\n  const todoUserName = action.userName\n  const todoContent = action.content\n\n  const data = { ...state }\n  const key = `[${todoUserName}]['allIds'][${todoId}]`;\n  setWith(data, key, { ...todoContent }, Object);\n  \n  state = { ...data }\n\n  return {\n    ...state\n  };\n}\n\nconst setTodo = (action: SetTodo, state: TodosState): TodosState => {\n  const todoId = action.id\n  const todoUserName = action.userName\n  const todoStatus = action.status\n\n  state[todoUserName]['allIds'][todoId]['status'] = todoStatus \n\n  return {\n    ...state,\n  };\n}\n\nconst deleteTodo = (action: DeleteTodo, state: TodosState): TodosState => {\n  const todoId = action.id\n  const todoUserName = action.userName\n\n  delete state[todoUserName].allIds[todoId]\n\n  return {\n    ...state,\n  };\n}\n\nconst viewTodo = (action: ViewTodo, state: TodosState): TodosState => {\n  const todoId = action.id\n  const todoUserName = action.userName\n\n  const byId = { ...state[todoUserName]?.allIds[todoId] };\n\n  return {\n    [todoUserName]: {\n      byId,\n      ...state[todoUserName]\n    }\n  };\n}\n\n\nexport const todosReducer: Reducer<TodosState,\n  | AllTodos\n  | AddTodo\n  | SetTodo\n  | DeleteTodo\n  | ViewTodo\n> = (\n  state: TodosState = initialTodoState,\n  action:\n    | AllTodos\n    | AddTodo\n    | SetTodo\n    | DeleteTodo\n    | ViewTodo\n): TodosState => {\n    switch (action.type) {\n      case TodoActionTypes.ADD_TODO: {\n        return addTodo(action, state)\n      }\n      case TodoActionTypes.SET_TODO: {\n        return setTodo(action, state)\n      }\n      case TodoActionTypes.DELETE_TODO: {\n        return deleteTodo(action, state)\n      }\n      case TodoActionTypes.VIEW_TODO: {\n        return viewTodo(action, state)\n      }\n      default:\n        return state;\n    }\n  }"]},"metadata":{},"sourceType":"module"}