{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/natserract/Projects/todolist-s/pages/activity/[slug]/index.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useRouter } from \"next/router\";\nimport ActivityHeader from '../../../components/activity-header';\nimport { ACTIVITY_GROUPS, TODO_ITEMS } from '../../../constant/api';\nimport { get } from '../../../api/API';\nimport Grid from '@material-ui/core/Grid';\nimport ActivityPopup from '../../../components/activity-popup';\nimport styles from './styles';\nimport CardItems from './todo-items';\nimport TodoPopup from './todo-popup';\nconst useStyles = makeStyles(styles);\n\nconst DetailActivity = () => {\n  const cs = useStyles();\n  const router = useRouter();\n  const {\n    0: activityData,\n    1: setActivityData\n  } = useState({\n    title: '',\n    items: []\n  });\n  const {\n    0: todoData,\n    1: setTodoData\n  } = useState({\n    title: '',\n    priority: ''\n  });\n  const todoItemRef = useRef('');\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: itemEmpty,\n    1: setItemEmpty\n  } = useState(false);\n  const {\n    0: addTodoDialog,\n    1: setAddTodoDialog\n  } = useState(false);\n  const {\n    0: editTodoDialog,\n    1: setEditTodoDialog\n  } = useState(false);\n  const {\n    0: editActivityDialog,\n    1: setEditActivityDialog\n  } = useState(false);\n\n  const fetchDataById = () => {\n    var _router$query;\n\n    const url = ACTIVITY_GROUPS + `/${(_router$query = router.query) === null || _router$query === void 0 ? void 0 : _router$query.id}`;\n\n    const onFetch = async () => {\n      try {\n        const responses = await get(url);\n        setActivityData({\n          title: responses === null || responses === void 0 ? void 0 : responses.title,\n          items: responses === null || responses === void 0 ? void 0 : responses.todo_items\n        });\n        setLoading(false);\n      } catch (error) {\n        console.error(error);\n        setLoading(true);\n      }\n    };\n\n    onFetch();\n  };\n\n  useEffect(fetchDataById, []);\n\n  const handleDetailTodo = id => {\n    todoItemRef.current = id;\n\n    const onFetch = async () => {\n      const url = TODO_ITEMS + `/${id}`;\n\n      try {\n        const responses = await get(url);\n        setTodoData({\n          title: responses === null || responses === void 0 ? void 0 : responses.title,\n          priority: responses === null || responses === void 0 ? void 0 : responses.priority\n        });\n        setEditTodoDialog(true);\n      } catch (error) {\n        console.error(error);\n        setEditTodoDialog(false);\n      }\n    };\n\n    onFetch();\n  };\n\n  const renderChildDialog = () => {\n    const initialTodoValues = {\n      \"title\": \"\",\n      \"priority\": \"\"\n    };\n    if (addTodoDialog) return /*#__PURE__*/_jsxDEV(TodoPopup, {\n      type: \"add\",\n      title: \"Tambah List Item\",\n      initialValues: _objectSpread({}, initialTodoValues),\n      openDialog: addTodoDialog,\n      setOpenDialog: setAddTodoDialog,\n      onRefetch: fetchDataById\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this);\n    if (editTodoDialog) return /*#__PURE__*/_jsxDEV(TodoPopup, {\n      id: todoItemRef.current,\n      type: \"edit\",\n      title: \"Ubah List Item\",\n      initialValues: _objectSpread({}, todoData),\n      openDialog: editTodoDialog,\n      setOpenDialog: setEditTodoDialog,\n      onRefetch: fetchDataById\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this);\n    if (editActivityDialog) return /*#__PURE__*/_jsxDEV(ActivityPopup, {\n      type: \"edit\",\n      title: \"Edit Activity\",\n      initialValues: {\n        activityName: activityData === null || activityData === void 0 ? void 0 : activityData.title\n      },\n      openDialog: editActivityDialog,\n      setOpenDialog: setEditActivityDialog,\n      onRefetch: fetchDataById\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this);\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 12\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    role: \"detailActivity\",\n    children: [/*#__PURE__*/_jsxDEV(ActivityHeader, {\n      title: (activityData === null || activityData === void 0 ? void 0 : activityData.title) || \"Loading...\",\n      onClick: () => setAddTodoDialog(true),\n      onUpdate: () => setEditActivityDialog(true),\n      children: renderChildDialog()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      alignItems: \"stretch\",\n      children: /*#__PURE__*/_jsxDEV(CardItems, {\n        items: activityData.items,\n        itemEmpty: itemEmpty,\n        setItemEmpty: setItemEmpty,\n        onEdit: handleDetailTodo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n};\n\nexport default DetailActivity;","map":{"version":3,"sources":["/Users/natserract/Projects/todolist-s/pages/activity/[slug]/index.tsx"],"names":["React","useEffect","useRef","useState","makeStyles","useRouter","ActivityHeader","ACTIVITY_GROUPS","TODO_ITEMS","get","Grid","ActivityPopup","styles","CardItems","TodoPopup","useStyles","DetailActivity","cs","router","activityData","setActivityData","title","items","todoData","setTodoData","priority","todoItemRef","loading","setLoading","itemEmpty","setItemEmpty","addTodoDialog","setAddTodoDialog","editTodoDialog","setEditTodoDialog","editActivityDialog","setEditActivityDialog","fetchDataById","url","query","id","onFetch","responses","todo_items","error","console","handleDetailTodo","current","renderChildDialog","initialTodoValues","activityName"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useRouter } from \"next/router\"\nimport ActivityHeader from '../../../components/activity-header';\nimport { ACTIVITY_GROUPS, TODO_ITEMS } from '../../../constant/api';\nimport { get } from '../../../api/API';\nimport Grid from '@material-ui/core/Grid';\nimport ActivityPopup from '../../../components/activity-popup';\nimport styles from './styles'\nimport CardItems from './todo-items';\nimport TodoPopup from './todo-popup';\n\nconst useStyles = makeStyles(styles)\n\nconst DetailActivity = () => {\n  const cs = useStyles()\n  const router = useRouter()\n\n  const [activityData, setActivityData] = useState({\n    title: '',\n    items: []\n  })\n  const [todoData, setTodoData] = useState({\n    title: '',\n    priority: '',\n  })\n\n  const todoItemRef = useRef('')\n\n  const [loading, setLoading] = useState(false);\n  const [itemEmpty, setItemEmpty] = useState(false)\n\n  const [addTodoDialog, setAddTodoDialog] = useState(false);\n  const [editTodoDialog, setEditTodoDialog] = useState(false);\n  const [editActivityDialog, setEditActivityDialog] = useState(false);\n\n  const fetchDataById = () => {\n    const url = ACTIVITY_GROUPS + `/${router.query?.id}`\n\n    const onFetch = async () => {\n      try {\n        const responses = await get(url)\n\n        setActivityData({\n          title: responses?.title,\n          items: responses?.todo_items\n        })\n        setLoading(false)\n\n      } catch (error) {\n        console.error(error)\n        setLoading(true)\n      }\n    }\n\n    onFetch()\n  }\n\n  useEffect(fetchDataById, []);\n\n  const handleDetailTodo = (id: string) => {\n    todoItemRef.current = id\n\n    const onFetch = async () => {\n      const url = TODO_ITEMS + `/${id}`\n\n      try {\n        const responses = await get(url)\n\n        setTodoData({\n          title: responses?.title,\n          priority: responses?.priority\n        })\n        setEditTodoDialog(true)\n      } catch (error) {\n        console.error(error)\n        setEditTodoDialog(false)\n      }\n    }\n\n    onFetch()\n  }\n\n  const renderChildDialog = () => {\n    const initialTodoValues = {\n      \"title\": \"\",\n      \"priority\": \"\"\n    }\n\n    if (addTodoDialog) return (\n      <TodoPopup\n        type=\"add\"\n        title=\"Tambah List Item\"\n        initialValues={{ ...initialTodoValues }}\n        openDialog={addTodoDialog}\n        setOpenDialog={setAddTodoDialog}\n        onRefetch={fetchDataById}\n      />\n    )\n\n    if (editTodoDialog) return (\n      <TodoPopup\n        id={todoItemRef.current}\n        type=\"edit\"\n        title=\"Ubah List Item\"\n        initialValues={{ ...todoData }}\n        openDialog={editTodoDialog}\n        setOpenDialog={setEditTodoDialog}\n        onRefetch={fetchDataById}\n      />\n    )\n\n    if (editActivityDialog) return (\n      <ActivityPopup\n        type=\"edit\"\n        title=\"Edit Activity\"\n        initialValues={{ activityName: activityData?.title }}\n        openDialog={editActivityDialog}\n        setOpenDialog={setEditActivityDialog}\n        onRefetch={fetchDataById}\n      />\n    )\n\n    return <React.Fragment />\n  }\n\n  return (\n    <div role=\"detailActivity\">\n      <ActivityHeader\n        title={activityData?.title || \"Loading...\"}\n        onClick={() => setAddTodoDialog(true)}\n        onUpdate={() => setEditActivityDialog(true)}\n        children={renderChildDialog()}\n      />\n\n      <Grid container spacing={3} alignItems=\"stretch\">\n        <CardItems\n          items={activityData.items}\n          itemEmpty={itemEmpty}\n          setItemEmpty={setItemEmpty}\n          onEdit={handleDetailTodo}\n        />\n      </Grid>\n    </div>\n  )\n}\n\nexport default DetailActivity"]},"metadata":{},"sourceType":"module"}