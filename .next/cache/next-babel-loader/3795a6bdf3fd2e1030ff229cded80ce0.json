{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/natserract/Projects/todolist-s/pages/activity.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport ActivityCard from \"../components/activity-card\";\nimport ActivityHeader from \"../components/activity-header\";\nimport Loading from \"../components/loading\";\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport EmptyItems from \"../components/empty-items\";\nimport { get } from '../api/API';\nimport { ACTIVITY_GROUPS } from '../constant/api';\nimport { parseDate } from \"../utils/utils\";\nconst useStyles = makeStyles({});\n\nconst Activity = () => {\n  const classes = useStyles();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: data,\n    1: setData\n  } = useState([]);\n\n  const fetchData = () => {\n    const url = ACTIVITY_GROUPS + '?email=notfound@gmail.com';\n\n    const onFetch = async () => {\n      try {\n        const responses = await get(url);\n        setData(responses === null || responses === void 0 ? void 0 : responses.data);\n        setLoading(false);\n      } catch (error) {\n        setLoading(true);\n      }\n    };\n\n    onFetch();\n  };\n\n  useEffect(fetchData, [loading]);\n\n  const renderActivityItems = () => {\n    if (loading) return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 25\n    }, this);\n    if (!data && !data.length) return /*#__PURE__*/_jsxDEV(EmptyItems, {\n      type: \"activity\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this);\n    return data.map((item, index) => /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      sm: 3,\n      children: /*#__PURE__*/_jsxDEV(ActivityCard, {\n        title: item.title,\n        date: parseDate(item.created_at)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, `item-${item.id}-${index}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    role: \"activity\",\n    children: [/*#__PURE__*/_jsxDEV(ActivityHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      alignItems: \"stretch\",\n      children: renderActivityItems()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Activity;","map":{"version":3,"sources":["/Users/natserract/Projects/todolist-s/pages/activity.tsx"],"names":["React","useState","useEffect","ActivityCard","ActivityHeader","Loading","Grid","makeStyles","EmptyItems","get","ACTIVITY_GROUPS","parseDate","useStyles","Activity","classes","loading","setLoading","data","setData","fetchData","url","onFetch","responses","error","renderActivityItems","length","map","item","index","title","created_at","id"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAuCC,SAAvC,QAAwD,OAAxD;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,SAASC,GAAT,QAAoB,YAApB;AACA,SAASC,eAAT,QAAgC,iBAAhC;AACA,SAASC,SAAT,QAA0B,gBAA1B;AAEA,MAAMC,SAAS,GAAGL,UAAU,CAAE,EAAF,CAA5B;;AAEA,MAAMM,QAAQ,GAAG,MAAM;AACrB,QAAMC,OAAO,GAAGF,SAAS,EAAzB;AAEA,QAAM;AAAA,OAACG,OAAD;AAAA,OAAUC;AAAV,MAAwBf,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM;AAAA,OAACgB,IAAD;AAAA,OAAOC;AAAP,MAAkBjB,QAAQ,CAAC,EAAD,CAAhC;;AAEA,QAAMkB,SAAS,GAAG,MAAM;AACtB,UAAMC,GAAG,GAAGV,eAAe,GAAG,2BAA9B;;AAEA,UAAMW,OAAO,GAAG,YAAY;AAC1B,UAAI;AACF,cAAMC,SAAS,GAAG,MAAMb,GAAG,CAACW,GAAD,CAA3B;AACAF,QAAAA,OAAO,CAACI,SAAD,aAACA,SAAD,uBAACA,SAAS,CAAEL,IAAZ,CAAP;AACAD,QAAAA,UAAU,CAAC,KAAD,CAAV;AACA,OAJF,CAIG,OAAOO,KAAP,EAAc;AACfP,QAAAA,UAAU,CAAC,IAAD,CAAV;AACA;AACH,KARD;;AAUAK,IAAAA,OAAO;AACR,GAdD;;AAgBAnB,EAAAA,SAAS,CAACiB,SAAD,EAAY,CAACJ,OAAD,CAAZ,CAAT;;AAEA,QAAMS,mBAAmB,GAAG,MAAM;AAChC,QAAIT,OAAJ,EAAa,oBAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AAEb,QAAI,CAACE,IAAD,IAAS,CAACA,IAAI,CAACQ,MAAnB,EAA2B,oBACzB,QAAC,UAAD;AAAY,MAAA,IAAI,EAAC;AAAjB;AAAA;AAAA;AAAA;AAAA,YADyB;AAI3B,WAAOR,IAAI,CAACS,GAAL,CAAS,CAACC,IAAD,EAAOC,KAAP,kBACd,QAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,EAAf;AAAmB,MAAA,EAAE,EAAE,CAAvB;AAAA,6BACE,QAAC,YAAD;AACE,QAAA,KAAK,EAAED,IAAI,CAACE,KADd;AAEE,QAAA,IAAI,EAAElB,SAAS,CAACgB,IAAI,CAACG,UAAN;AAFjB;AAAA;AAAA;AAAA;AAAA;AADF,OAAgC,QAAOH,IAAI,CAACI,EAAG,IAAGH,KAAM,EAAxD;AAAA;AAAA;AAAA;AAAA,YADK,CAAP;AAQD,GAfD;;AAiBA,sBACE;AAAK,IAAA,IAAI,EAAC,UAAV;AAAA,4BACE,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAGE,QAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAE,CAAzB;AAA4B,MAAA,UAAU,EAAC,SAAvC;AAAA,gBACGJ,mBAAmB;AADtB;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAlDD;;AAoDA,eAAeX,QAAf","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\"\nimport ActivityCard from \"../components/activity-card\"\nimport ActivityHeader from \"../components/activity-header\"\nimport Loading from \"../components/loading\"\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport EmptyItems from \"../components/empty-items\";\nimport { get } from '../api/API'\nimport { ACTIVITY_GROUPS } from '../constant/api'\nimport { parseDate } from \"../utils/utils\";\n\nconst useStyles = makeStyles(({}))\n\nconst Activity = () => {\n  const classes = useStyles()\n\n  const [loading, setLoading] = useState(true)\n  const [data, setData] = useState([])\n\n  const fetchData = () => {\n    const url = ACTIVITY_GROUPS + '?email=notfound@gmail.com'\n\n    const onFetch = async () => {\n      try {\n        const responses = await get(url)\n        setData(responses?.data)\n        setLoading(false)\n       } catch (error) {\n        setLoading(true)\n       }\n    }\n    \n    onFetch()\n  }\n\n  useEffect(fetchData, [loading]);\n\n  const renderActivityItems = () => {\n    if (loading) return <Loading />\n\n    if (!data && !data.length) return (\n      <EmptyItems type=\"activity\" />\n    )\n\n    return data.map((item, index) => \n      <Grid item xs={12} sm={3} key={`item-${item.id}-${index}`}>\n        <ActivityCard\n          title={item.title}\n          date={parseDate(item.created_at)}\n        />\n      </Grid>\n    )\n  }\n\n  return (\n    <div role=\"activity\">\n      <ActivityHeader />\n\n      <Grid container spacing={3} alignItems=\"stretch\">\n        {renderActivityItems()}\n      </Grid>\n    </div>\n  )\n}\n\nexport default Activity"]},"metadata":{},"sourceType":"module"}