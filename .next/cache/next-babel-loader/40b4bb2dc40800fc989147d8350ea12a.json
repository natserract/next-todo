{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/natserract/Projects/todolist-s/components/activity-header/popup.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useCallback, useState } from 'react';\nimport { makeStyles } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\nimport styles from './styles';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport * as yup from 'yup';\nimport { useFormik } from 'formik';\nimport { ACTIVITY_GROUPS } from '../../constant/api';\nimport { post } from '../../api/API';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { useRefetch } from '../../hooks/useRefetch';\nconst validationSchema = yup.object({\n  activityName: yup.string().required()\n});\nconst useStyles = makeStyles(styles);\n\nconst ActivityPopup = props => {\n  const classes = useStyles();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    setDoRefetch\n  } = useRefetch();\n  const formik = useFormik({\n    initialValues: {\n      activityName: ''\n    },\n    validationSchema,\n    onSubmit: values => {\n      const {\n        activityName\n      } = values;\n      console.log('submitted', activityName);\n      handlePostData(activityName);\n    }\n  });\n  const handlePostData = useCallback(title => {\n    const url = ACTIVITY_GROUPS;\n    const dataManual = {\n      email: \"notfound@gmail.com\",\n      comment: \"Comment confirmed!\"\n    };\n\n    const onPost = async () => {\n      try {\n        await post(url, _objectSpread({\n          title\n        }, dataManual));\n        setLoading(false);\n      } catch (error) {\n        setLoading(true);\n      } finally {\n        handleClose();\n        setDoRefetch(true);\n      }\n    };\n\n    onPost();\n  }, []);\n\n  const handleClose = () => {\n    props.setOpenDialog(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    className: classes.dialog,\n    open: props.openDialog,\n    onClose: handleClose,\n    \"aria-labelledby\": \"form-dialog-title\",\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      id: \"form-dialog-title\",\n      className: classes.dialogTitle,\n      children: [\"Tambah Activity\", /*#__PURE__*/_jsxDEV(IconButton, {\n        \"aria-label\": \"close\",\n        className: classes.closeButton,\n        onClick: handleClose,\n        children: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      dividers: true,\n      className: classes.dialogContent,\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: formik.handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.formGroup,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"activityName\",\n            children: \"Nama Activity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            rows: 4,\n            name: \"activityName\",\n            placeholder: \"Tambahkan nama activity\",\n            value: formik.values.activityName,\n            variant: \"outlined\",\n            onChange: formik.handleChange,\n            onBlur: formik.handleBlur,\n            className: `${formik.errors.activityName && formik.touched.activityName ? classes.formikErrors : null} ${classes.activityNameInput}`,\n            autoComplete: \"off\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        onClick: () => formik.handleSubmit(),\n        variant: \"contained\",\n        color: \"primary\",\n        children: [loading && /*#__PURE__*/_jsxDEV(CircularProgress, {\n          color: \"secondary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 23\n        }, this), \" Simpan\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n\nexport default ActivityPopup;","map":{"version":3,"sources":["/Users/natserract/Projects/todolist-s/components/activity-header/popup.tsx"],"names":["React","useCallback","useState","makeStyles","TextField","Dialog","Button","styles","DialogTitle","DialogContent","DialogActions","IconButton","CloseIcon","yup","useFormik","ACTIVITY_GROUPS","post","CircularProgress","useRefetch","validationSchema","object","activityName","string","required","useStyles","ActivityPopup","props","classes","loading","setLoading","setDoRefetch","formik","initialValues","onSubmit","values","console","log","handlePostData","title","url","dataManual","email","comment","onPost","error","handleClose","setOpenDialog","dialog","openDialog","dialogTitle","closeButton","dialogContent","handleSubmit","formGroup","handleChange","handleBlur","errors","touched","formikErrors","activityNameInput"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from 'react';\nimport { makeStyles } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\nimport styles from './styles'\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport * as yup from 'yup';\nimport { useFormik } from 'formik';\nimport { ACTIVITY_GROUPS } from '../../constant/api';\nimport { post } from '../../api/API'\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { useRefetch } from '../../hooks/useRefetch';\n\ntype Props = {\n  openDialog: boolean;\n  setOpenDialog: Function;\n}\n\nconst validationSchema = yup.object({\n  activityName: yup.string().required(),\n});\n\nconst useStyles = makeStyles(styles);\n\nconst ActivityPopup: React.FC<Props> = (props) => {\n  const classes = useStyles()\n  const [loading, setLoading] = useState(false);\n  const { setDoRefetch } = useRefetch()\n\n  const formik = useFormik({\n    initialValues: {\n      activityName: '',\n    },\n    validationSchema,\n    onSubmit: (values) => {\n      const { activityName } = values\n\n      console.log('submitted', activityName)\n      handlePostData(activityName)\n    },\n  })\n\n  const handlePostData = useCallback((title: string) => {\n    const url = ACTIVITY_GROUPS\n\n    const dataManual = {\n      email: \"notfound@gmail.com\",\n      comment: \"Comment confirmed!\"\n    }\n\n    const onPost = async () => {\n      try {\n        await post(url, {\n          title,\n          ...dataManual,\n        })\n        setLoading(false)\n      } \n      catch (error) {\n        setLoading(true)\n      } \n      finally {\n        handleClose()\n        setDoRefetch(true)\n      }\n    }\n\n    onPost()\n  }, [])\n\n  const handleClose = () => {\n    props.setOpenDialog(false);\n  };\n\n  return (\n    <Dialog className={classes.dialog} open={props.openDialog} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n      <DialogTitle id=\"form-dialog-title\" className={classes.dialogTitle}>\n        Tambah Activity\n\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={handleClose}>\n          <CloseIcon />\n        </IconButton>\n      </DialogTitle>\n\n      <DialogContent dividers className={classes.dialogContent}>\n        <form onSubmit={formik.handleSubmit}>\n          <div className={classes.formGroup}>\n            <label htmlFor=\"activityName\">Nama Activity</label>\n            <TextField\n              rows={4}\n              name=\"activityName\"\n              placeholder=\"Tambahkan nama activity\"\n              value={formik.values.activityName}\n              variant=\"outlined\"\n              onChange={formik.handleChange}\n              onBlur={formik.handleBlur}\n              className={\n                `${formik.errors.activityName && formik.touched.activityName ? classes.formikErrors : null} ${classes.activityNameInput}`\n              }\n              autoComplete=\"off\"\n              required\n            />\n          </div>\n        </form>\n      </DialogContent>\n\n      <DialogActions>\n        <Button type=\"submit\" onClick={() => formik.handleSubmit()} variant=\"contained\" color=\"primary\">\n          {loading && <CircularProgress color=\"secondary\" />} Simpan\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default ActivityPopup"]},"metadata":{},"sourceType":"module"}