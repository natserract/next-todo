{"ast":null,"code":"import Axios from 'axios';\nexport const get = async route => {\n  const config = {};\n\n  try {\n    const response = await Axios.get(route, config);\n    let responseData = response.data;\n\n    if (responseData === null) {\n      responseData = [];\n    }\n\n    if (responseData instanceof Object) {\n      return responseData;\n    } else {\n      responseData = [];\n    }\n\n    return responseData;\n  } catch (error) {\n    if (Axios.isCancel(error)) {\n      // console.log('Request canceled: ', error.message);\n      return;\n    }\n\n    return Promise.reject({\n      status: error.response.status,\n      what: error.response.statusText\n    });\n  }\n};\nexport const getAll = values => {\n  return Axios.all(values).then(Axios.spread((...responses) => {\n    return responses;\n  }));\n};\nexport const post = async (route, data = {}) => {\n  try {\n    const response = await Axios.post(route, data);\n    let responseData = response.data;\n\n    if (responseData === null) {\n      responseData = [];\n    }\n\n    if (responseData instanceof Object) {\n      return responseData;\n    } else {\n      responseData = [];\n    }\n\n    return responseData;\n  } catch (error) {\n    if (Axios.isCancel(error)) {\n      // console.log('Request canceled: ', error.message);\n      return;\n    }\n\n    return Promise.reject({\n      status: error.response.status,\n      what: error.response.statusText\n    });\n  }\n};\nexport const remove = async route => {\n  const config = {};\n\n  try {\n    const response = await Axios.delete(route, config);\n    let responseData = response.data;\n\n    if (responseData === null) {\n      responseData = [];\n    }\n\n    if (responseData instanceof Object) {\n      return responseData;\n    } else {\n      responseData = [];\n    }\n\n    return responseData;\n  } catch (error) {\n    if (Axios.isCancel(error)) {\n      // console.log('Request canceled: ', error.message);\n      return;\n    }\n\n    return Promise.reject({\n      status: error.response.status,\n      what: error.response.statusText\n    });\n  }\n};","map":{"version":3,"sources":["/Users/natserract/Projects/todolist-s/api/API.ts"],"names":["Axios","get","route","config","response","responseData","data","Object","error","isCancel","Promise","reject","status","what","statusText","getAll","values","all","then","spread","responses","post","remove","delete"],"mappings":"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","sourcesContent":["import Axios, { AxiosError, AxiosRequestConfig } from 'axios'\n\nexport const get = async (route: string) => {\n  const config = {}\n\n  try {\n    const response = await Axios.get(route, config);\n    let responseData = response.data;\n\n    if (responseData === null) {\n      responseData = [];\n    }\n\n    if (responseData instanceof Object) {\n      return responseData;\n    } else {\n      responseData = [];\n    }\n    return responseData;\n  } catch (error) {\n    if (Axios.isCancel(error)) {\n      // console.log('Request canceled: ', error.message);\n      return;\n    }\n    return Promise.reject({\n      status: error.response!!.status,\n      what: error.response!!.statusText,\n    });\n  }\n}\n\nexport const getAll = <T>(values: (T | Promise<T>)[]) => {\n  return Axios.all(values)\n    .then(Axios.spread((...responses) => {\n      return responses\n    }))\n}\n\nexport const post = async (route: string, data = {}) => {\n  try {\n    const response = await Axios.post(route, data);\n    let responseData = response.data;\n\n    if (responseData === null) {\n      responseData = [];\n    }\n\n    if (responseData instanceof Object) {\n      return responseData;\n    } else {\n      responseData = [];\n    }\n    return responseData;\n  } catch (error) {\n    if (Axios.isCancel(error)) {\n      // console.log('Request canceled: ', error.message);\n      return;\n    }\n    return Promise.reject({\n      status: error.response!!.status,\n      what: error.response!!.statusText,\n    });\n  }\n}\n\nexport const remove = async (route: string) => {\n  const config = {}\n\n  try {\n    const response = await Axios.delete(route, config)\n    let responseData = response.data;\n\n    if (responseData === null) {\n      responseData = [];\n    }\n\n    if (responseData instanceof Object) {\n      return responseData;\n    } else {\n      responseData = [];\n    }\n    return responseData;\n  } catch (error) {\n    if (Axios.isCancel(error)) {\n      // console.log('Request canceled: ', error.message);\n      return;\n    }\n    return Promise.reject({\n      status: error.response!!.status,\n      what: error.response!!.statusText,\n    });\n  }\n}"]},"metadata":{},"sourceType":"module"}