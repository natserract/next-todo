{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useCallback, useMemo, useState, createElement, useContext } from 'react';\nvar DataCtx = /*#__PURE__*/createContext(undefined);\nexport var useData = function useData() {\n  _s();\n\n  return useContext(DataCtx);\n}; // Reusable component for {activity header}, \n// need to refetch data on children\n// After insert new data, so that's why i need \n// context for wrapping this section\n// No complicated, just simple structure, fetch <-> replaced\n\n_s(useData, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport var DataProvider = function DataProvider(_ref) {\n  _s2();\n\n  var children = _ref.children;\n\n  var _useState = useState(true),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var _useState2 = useState({\n    name: '',\n    items: []\n  }),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var setValue = useCallback(function (values) {\n    if (!values) throw new TypeError();\n    setData(values);\n  }, []);\n  var value = useMemo(function () {\n    return [loading, setLoading, data, setValue];\n  }, [loading, setLoading, data, setValue]);\n  return /*#__PURE__*/createElement(DataCtx.Provider, {\n    value: value\n  }, children);\n};\n\n_s2(DataProvider, \"aE8Oyvq06KX2KsXmgfAXffeKOWo=\");\n\n_c = DataProvider;\nexport var AllContextProvider = function AllContextProvider(_ref2) {\n  var children = _ref2.children;\n  return /*#__PURE__*/createElement(DataProvider, null, children);\n};\n_c2 = AllContextProvider;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"DataProvider\");\n$RefreshReg$(_c2, \"AllContextProvider\");","map":{"version":3,"sources":["/Users/natserract/Projects/todolist-s/store/configureStore.tsx"],"names":["createContext","useCallback","useMemo","useState","createElement","useContext","DataCtx","undefined","useData","DataProvider","children","loading","setLoading","name","items","data","setData","setValue","values","TypeError","value","Provider","AllContextProvider"],"mappings":";;;AACA,SAASA,aAAT,EAAwBC,WAAxB,EAAqCC,OAArC,EAA8CC,QAA9C,EAAwDC,aAAxD,EAAuEC,UAAvE,QAA2H,OAA3H;AAKA,IAAMC,OAAO,gBAAGN,aAAa,CAEbO,SAFa,CAA7B;AAIA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA;;AAAA,SAAMH,UAAU,CAACC,OAAD,CAAhB;AAAA,CAAhB,C,CAOP;AACA;AACA;AACA;AACA;;GAXaE,O;;AAYb,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,OAAkB;AAAA;;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,kBACdP,QAAQ,CAAC,IAAD,CADM;AAAA,MACrCQ,OADqC;AAAA,MAC5BC,UAD4B;;AAAA,mBAEpBT,QAAQ,CAAiB;AAC/CU,IAAAA,IAAI,EAAE,EADyC;AAE/CC,IAAAA,KAAK,EAAE;AAFwC,GAAjB,CAFY;AAAA,MAErCC,IAFqC;AAAA,MAE/BC,OAF+B;;AAO5C,MAAMC,QAAQ,GAAGhB,WAAW,CAAC,UAAAiB,MAAM,EAAI;AACrC,QAAI,CAACA,MAAL,EAAa,MAAM,IAAIC,SAAJ,EAAN;AACbH,IAAAA,OAAO,CAACE,MAAD,CAAP;AACD,GAH2B,EAGzB,EAHyB,CAA5B;AAKA,MAAME,KAAK,GAAGlB,OAAO,CAAC;AAAA,WAAM,CAC1BS,OAD0B,EACjBC,UADiB,EACLG,IADK,EACCE,QADD,CAAN;AAAA,GAAD,EAEnB,CACEN,OADF,EAEEC,UAFF,EAGEG,IAHF,EAIEE,QAJF,CAFmB,CAArB;AASA,sBAAOb,aAAa,CAACE,OAAO,CAACe,QAAT,EAAmB;AAAED,IAAAA,KAAK,EAALA;AAAF,GAAnB,EAA8BV,QAA9B,CAApB;AACD,CAtBM;;IAAMD,Y;;KAAAA,Y;AAwBb,OAAO,IAAMa,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA,MAAGZ,QAAH,SAAGA,QAAH;AAAA,sBAAkBN,aAAa,CAC/DK,YAD+D,EAE/D,IAF+D,EAG/DC,QAH+D,CAA/B;AAAA,CAA3B;MAAMY,kB","sourcesContent":["\nimport { createContext, useCallback, useMemo, useState, createElement, useContext, useRef, Dispatch, SetStateAction } from 'react'\nimport { ActivityFields } from './State'\n\ntype Context<T> = T | (T | ((a: T) => void))[]\n\nconst DataCtx = createContext<Context<\n  boolean | ActivityFields | Dispatch<SetStateAction<boolean>\n>> | undefined>(undefined)\n\nexport const useData = () => useContext(DataCtx) as [\n  boolean,\n  Function,\n  ActivityFields, \n  Function\n]\n\n// Reusable component for {activity header}, \n// need to refetch data on children\n// After insert new data, so that's why i need \n// context for wrapping this section\n// No complicated, just simple structure, fetch <-> replaced\nexport const DataProvider = ({ children }) => {\n  const [loading, setLoading] = useState(true)\n  const [data, setData] = useState<ActivityFields>({\n    name: '',\n    items: []\n  })\n\n  const setValue = useCallback(values => {\n    if (!values) throw new TypeError()\n    setData(values)\n  }, [])\n\n  const value = useMemo(() => [\n    loading, setLoading, data, setValue], \n    [\n      loading, \n      setLoading, \n      data, \n      setValue]\n  )\n\n  return createElement(DataCtx.Provider, { value }, children)\n}\n\nexport const AllContextProvider = ({ children }) => createElement(\n  DataProvider,\n  null,\n  children,\n)\n"]},"metadata":{},"sourceType":"module"}