{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/natserract/Projects/todolist-s/pages/activity/[slug]/todo-popup/index.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport { makeStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport TextField from '@material-ui/core/TextField';\nimport styles from './styles';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\nvar useStyles = makeStyles(styles);\nvar validationSchema = yup.object({\n  activityName: yup.string().required()\n});\n\nvar TodoPopup = function TodoPopup(props) {\n  _s();\n\n  var classes = useStyles();\n  var formik = useFormik({\n    initialValues: {\n      activityName: ''\n    },\n    validationSchema: validationSchema,\n    onSubmit: function onSubmit(values) {\n      var _ref = values,\n          activityName = _ref.activityName; // handlePostData(activityName)\n    }\n  });\n\n  var handleClose = function handleClose() {\n    props.setOpenDialog(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    className: classes.dialog,\n    open: props.openDialog,\n    onClose: handleClose,\n    \"aria-labelledby\": \"form-dialog-title\",\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      id: \"form-dialog-title\",\n      className: classes.dialogTitle,\n      children: [\"\\\"TITLE\\\"\", /*#__PURE__*/_jsxDEV(IconButton, {\n        \"aria-label\": \"close\",\n        className: classes.closeButton,\n        onClick: handleClose,\n        children: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      dividers: true,\n      className: classes.dialogContent,\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: formik.handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.formGroup,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"activityName\",\n            children: \"Nama Activity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(TextField, {\n            rows: 4,\n            name: \"activityName\",\n            placeholder: \"Tambahkan nama activity\",\n            value: formik.values.activityName,\n            variant: \"outlined\",\n            onChange: formik.handleChange,\n            onBlur: formik.handleBlur,\n            autoFocus: true,\n            className: \"\".concat(formik.errors.activityName && formik.touched.activityName ? classes.formikErrors : null, \" \").concat(classes.activityNameInput),\n            autoComplete: \"off\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        onClick: function onClick() {\n          return formik.handleSubmit();\n        },\n        variant: \"contained\",\n        color: \"primary\",\n        children: \"Simpan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(TodoPopup, \"C5g7rQO6GJW4fOIoJxJdUVhrL6g=\", false, function () {\n  return [useStyles, useFormik];\n});\n\n_c = TodoPopup;\nexport default TodoPopup;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoPopup\");","map":{"version":3,"sources":["/Users/natserract/Projects/todolist-s/pages/activity/[slug]/todo-popup/index.tsx"],"names":["Dialog","Button","DialogTitle","DialogContent","DialogActions","makeStyles","IconButton","CloseIcon","TextField","styles","useFormik","yup","useStyles","validationSchema","object","activityName","string","required","TodoPopup","props","classes","formik","initialValues","onSubmit","values","handleClose","setOpenDialog","dialog","openDialog","dialogTitle","closeButton","dialogContent","handleSubmit","formGroup","handleChange","handleBlur","errors","touched","formikErrors","activityNameInput"],"mappings":"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","sourcesContent":["import Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport { makeStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport TextField from '@material-ui/core/TextField';\nimport styles from './styles'\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\n\nconst useStyles = makeStyles(styles);\n\nconst validationSchema = yup.object({\n  activityName: yup.string().required(),\n});\n\ntype Props = {\n  openDialog: boolean;\n  title: string;\n  setOpenDialog: Function;\n  onRefetch: Function\n}\n\nconst TodoPopup: React.FC<Props> = (props) => {\n  const classes = useStyles()\n\n  const formik = useFormik({\n    initialValues: {\n      activityName: ''\n    },\n    validationSchema,\n    onSubmit: (values) => {\n      const { activityName } = values!!\n\n      // handlePostData(activityName)\n    },\n  })\n\n  const handleClose = () => {\n    props.setOpenDialog(false);\n  };\n\n  return (\n    <Dialog className={classes.dialog} open={props.openDialog} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n      <DialogTitle id=\"form-dialog-title\" className={classes.dialogTitle}>\n        \"TITLE\"\n\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={handleClose}>\n          <CloseIcon />\n        </IconButton>\n      </DialogTitle>\n\n      <DialogContent dividers className={classes.dialogContent}>\n        <form onSubmit={formik.handleSubmit}>\n          <div className={classes.formGroup}>\n            <label htmlFor=\"activityName\">Nama Activity</label>\n            <TextField\n              rows={4}\n              name=\"activityName\"\n              placeholder=\"Tambahkan nama activity\"\n              value={formik.values.activityName}\n              variant=\"outlined\"\n              onChange={formik.handleChange}\n              onBlur={formik.handleBlur}\n              autoFocus\n              className={\n                `${formik.errors.activityName && formik.touched.activityName ? classes.formikErrors : null} ${classes.activityNameInput}`\n              }\n              autoComplete=\"off\"\n              required\n            />\n          </div>\n        </form>\n      </DialogContent>\n\n      <DialogActions>\n        <Button type=\"submit\" onClick={() => formik.handleSubmit()} variant=\"contained\" color=\"primary\">\n           Simpan\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default TodoPopup"]},"metadata":{},"sourceType":"module"}