{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { get } from '../api/API';\nimport { ACTIVITY_GROUPS } from '../constant/api';\nexport var useRefetch = function useRefetch() {\n  _s();\n\n  var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ACTIVITY_GROUPS + '?email=notfound@gmail.com';\n\n  var _useState = useState(false),\n      doRefetch = _useState[0],\n      setDoRefetch = _useState[1];\n\n  var onRefetch = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var responses;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return get(url);\n\n            case 3:\n              responses = _context.sent;\n              _context.next = 9;\n              break;\n\n            case 6:\n              _context.prev = 6;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(_context.t0);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 6]]);\n    }));\n\n    return function onRefetch() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    if (doRefetch) onRefetch();\n  }, [doRefetch]);\n  return {\n    doRefetch: doRefetch,\n    setDoRefetch: setDoRefetch\n  };\n};\n\n_s(useRefetch, \"FAj+bddIuNaBxYZ0jJ50dGXjr3E=\");","map":{"version":3,"sources":["/Users/natserract/Projects/todolist-s/hooks/useRefetch.ts"],"names":["useEffect","useState","get","ACTIVITY_GROUPS","useRefetch","url","doRefetch","setDoRefetch","onRefetch","responses","console","error"],"mappings":";;;;;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,GAAT,QAAoB,YAApB;AACA,SAASC,eAAT,QAAgC,iBAAhC;AAEA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAyD;AAAA;;AAAA,MAAxDC,GAAwD,uEAAlDF,eAAe,GAAG,2BAAgC;;AAAA,kBAC/CF,QAAQ,CAAC,KAAD,CADuC;AAAA,MAC1EK,SAD0E;AAAA,MAC/DC,YAD+D;;AAGjF,MAAMC,SAAS;AAAA,wEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEUN,GAAG,CAACG,GAAD,CAFb;;AAAA;AAERI,cAAAA,SAFQ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAIdC,cAAAA,OAAO,CAACC,KAAR;;AAJc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAATH,SAAS;AAAA;AAAA;AAAA,KAAf;;AAQAR,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIM,SAAJ,EAAeE,SAAS;AACzB,GAFQ,EAEN,CAACF,SAAD,CAFM,CAAT;AAIA,SAAO;AACLA,IAAAA,SAAS,EAATA,SADK;AAELC,IAAAA,YAAY,EAAZA;AAFK,GAAP;AAID,CAnBM;;GAAMH,U","sourcesContent":["import Axios from 'axios'\nimport { useEffect, useState } from 'react'\nimport { get } from '../api/API'\nimport { ACTIVITY_GROUPS } from '../constant/api'\n\nexport const useRefetch = (url = ACTIVITY_GROUPS + '?email=notfound@gmail.com') => {\n  const [doRefetch, setDoRefetch] = useState(false)\n\n  const onRefetch = async () => {\n    try {\n      const responses = await get(url)\n    } catch (error) {\n      console.error(error)\n    }\n  }\n  \n  useEffect(() => {\n    if (doRefetch) onRefetch()\n  }, [doRefetch])\n\n  return {\n    doRefetch,\n    setDoRefetch,\n  }\n}"]},"metadata":{},"sourceType":"module"}