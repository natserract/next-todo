{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/natserract/Projects/todolist-s/containers/layout.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useCallback } from 'react';\nimport Header from './header';\nimport { makeStyles } from '@material-ui/core';\nimport styles from './styles';\nimport Container from '@material-ui/core/Container';\nimport { useData } from '../store/configureStore';\nimport { useRouter } from 'next/router';\nimport ActivityHeader from '../components/activity-header';\nimport { get } from '../api/API';\nimport { ACTIVITY_GROUPS, TODO_ITEMS } from '../constant/api';\nvar useStyles = makeStyles(styles);\n\nvar Layout = function Layout(props) {\n  _s();\n\n  var classes = useStyles();\n\n  var _useRouter = useRouter(),\n      route = _useRouter.route,\n      query = _useRouter.query;\n\n  var _useData = useData(),\n      _useData2 = _slicedToArray(_useData, 4),\n      setLoading = _useData2[1],\n      setData = _useData2[3];\n\n  var refetchData = useCallback(function () {\n    var urls = {\n      '/': ACTIVITY_GROUPS + '?email=notfound@gmail.com',\n      'activity': TODO_ITEMS + \"/\".concat(query)\n    };\n\n    var onRefetch = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _route, url, responses;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _route = route.split(\"/\").find(function (v, index) {\n                  return index == 1;\n                });\n                url = urls[_route === \"\" ? \"/\" : _route];\n                _context.next = 5;\n                return get(url);\n\n              case 5:\n                responses = _context.sent;\n                setData({\n                  name: '@@FetchActivity',\n                  items: responses === null || responses === void 0 ? void 0 : responses.data\n                });\n                setLoading(false);\n                _context.next = 13;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](0);\n                setLoading(true);\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 10]]);\n      }));\n\n      return function onRefetch() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    onRefetch();\n  }, [route, query]);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"md\",\n      className: classes.layout,\n      children: [/*#__PURE__*/_jsxDEV(ActivityHeader, {\n        title: query !== null && query !== void 0 && query.slug || route === \"\" ? \"Activity\" : \"Loading...\",\n        onRefetch: refetchData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, _this), props.children]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Layout, \"w7VUmNKqHeZYUiGM0oIwN5+oVEM=\", false, function () {\n  return [useStyles, useRouter, useData];\n});\n\n_c = Layout;\nexport default Layout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Layout\");","map":{"version":3,"sources":["/Users/natserract/Projects/todolist-s/containers/layout.tsx"],"names":["React","useCallback","Header","makeStyles","styles","Container","useData","useRouter","ActivityHeader","get","ACTIVITY_GROUPS","TODO_ITEMS","useStyles","Layout","props","classes","route","query","setLoading","setData","refetchData","urls","onRefetch","_route","split","find","v","index","url","responses","name","items","data","layout","slug","children"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,SAASC,OAAT,QAAwB,yBAAxB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,SAASC,GAAT,QAAoB,YAApB;AACA,SAASC,eAAT,EAA0BC,UAA1B,QAA4C,iBAA5C;AAEA,IAAMC,SAAS,GAAGT,UAAU,CAACC,MAAD,CAA5B;;AAEA,IAAMS,MAAgB,GAAG,SAAnBA,MAAmB,CAACC,KAAD,EAAW;AAAA;;AAClC,MAAMC,OAAO,GAAGH,SAAS,EAAzB;;AADkC,mBAETL,SAAS,EAFA;AAAA,MAE1BS,KAF0B,cAE1BA,KAF0B;AAAA,MAEnBC,KAFmB,cAEnBA,KAFmB;;AAAA,iBAIAX,OAAO,EAJP;AAAA;AAAA,MAIzBY,UAJyB;AAAA,MAIXC,OAJW;;AAMlC,MAAMC,WAAW,GAAGnB,WAAW,CAAC,YAAM;AACpC,QAAMoB,IAAI,GAAG;AACX,WAAKX,eAAe,GAAG,2BADZ;AAEX,kBAAaC,UAAU,cAAOM,KAAP;AAFZ,KAAb;;AAKA,QAAMK,SAAS;AAAA,0EAAG;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAERC,gBAAAA,MAFQ,GAECP,KAAK,CAACQ,KAAN,CAAY,GAAZ,EAAiBC,IAAjB,CAAsB,UAACC,CAAD,EAAIC,KAAJ;AAAA,yBAAcA,KAAK,IAAI,CAAvB;AAAA,iBAAtB,CAFD;AAGRC,gBAAAA,GAHQ,GAGFP,IAAI,CAACE,MAAM,KAAK,EAAX,GAAgB,GAAhB,GAAsBA,MAAvB,CAHF;AAAA;AAAA,uBAKUd,GAAG,CAACmB,GAAD,CALb;;AAAA;AAKRC,gBAAAA,SALQ;AAMdV,gBAAAA,OAAO,CAAC;AACNW,kBAAAA,IAAI,EAAE,iBADA;AAENC,kBAAAA,KAAK,EAAEF,SAAF,aAAEA,SAAF,uBAAEA,SAAS,CAAEG;AAFZ,iBAAD,CAAP;AAIAd,gBAAAA,UAAU,CAAC,KAAD,CAAV;AAVc;AAAA;;AAAA;AAAA;AAAA;AAYdA,gBAAAA,UAAU,CAAC,IAAD,CAAV;;AAZc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAATI,SAAS;AAAA;AAAA;AAAA,OAAf;;AAeAA,IAAAA,SAAS;AACV,GAtB8B,EAsB5B,CAACN,KAAD,EAAQC,KAAR,CAtB4B,CAA/B;AAwBA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,aADF,eAEI,QAAC,SAAD;AAAW,MAAA,QAAQ,EAAC,IAApB;AAAyB,MAAA,SAAS,EAAEF,OAAO,CAACkB,MAA5C;AAAA,8BACE,QAAC,cAAD;AAAgB,QAAA,KAAK,EAAEhB,KAAK,SAAL,IAAAA,KAAK,WAAL,IAAAA,KAAK,CAAEiB,IAAP,IAAelB,KAAK,KAAK,EAAzB,GAA8B,UAA9B,GAA2C,YAAlE;AAAgF,QAAA,SAAS,EAAEI;AAA3F;AAAA;AAAA;AAAA;AAAA,eADF,EAEGN,KAAK,CAACqB,QAFT;AAAA;AAAA;AAAA;AAAA;AAAA,aAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AASD,CAvCD;;GAAMtB,M;UACYD,S,EACSL,S,EAESD,O;;;KAJ9BO,M;AAyCN,eAAeA,MAAf","sourcesContent":["import React, { useCallback } from 'react';\nimport Header from './header';\nimport { makeStyles } from '@material-ui/core';\nimport styles from './styles'\nimport Container from '@material-ui/core/Container';\nimport { useData } from '../store/configureStore';\nimport { useRouter } from 'next/router';\nimport ActivityHeader from '../components/activity-header';\nimport { get } from '../api/API';\nimport { ACTIVITY_GROUPS, TODO_ITEMS } from '../constant/api';\n\nconst useStyles = makeStyles(styles);\n\nconst Layout: React.FC = (props) => {\n  const classes = useStyles()\n  const { route, query } = useRouter()\n\n  const [, setLoading, , setData] = useData()\n\n  const refetchData = useCallback(() => {\n    const urls = {\n      '/': ACTIVITY_GROUPS + '?email=notfound@gmail.com',\n      'activity':  TODO_ITEMS + `/${query}`\n    }\n\n    const onRefetch = async () => {\n      try {\n        const _route = route.split(\"/\").find((v, index) => index == 1)\n        const url = urls[_route === \"\" ? \"/\" : _route]\n\n        const responses = await get(url)\n        setData({\n          name: '@@FetchActivity',\n          items: responses?.data\n        })\n        setLoading(false)\n      } catch (error) {\n        setLoading(true)\n      }\n    }\n    onRefetch()\n  }, [route, query])\n\n  return (\n    <React.Fragment>\n      <Header />\n        <Container maxWidth=\"md\" className={classes.layout}>\n          <ActivityHeader title={query?.slug || route === \"\" ? \"Activity\" : \"Loading...\"} onRefetch={refetchData} />\n          {props.children}\n        </Container>\n    </React.Fragment>\n  );\n};\n\nexport default Layout;\n"]},"metadata":{},"sourceType":"module"}