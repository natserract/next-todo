{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/natserract/Projects/todolist-s/pages/activity/[slug]/index.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useRouter } from \"next/router\";\nimport styles from './styles';\nimport ActivityHeader from '../../../components/activity-header';\nimport ActivityPopup from '../../activityPopup';\nimport { ACTIVITY_GROUPS } from '../../../constant/api';\nimport { get } from '../../../api/API';\nimport Grid from '@material-ui/core/Grid';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nconst useStyles = makeStyles(styles);\n\nconst DetailActivity = () => {\n  const cs = useStyles();\n  const router = useRouter();\n  const {\n    0: data,\n    1: setData\n  } = useState({\n    title: ''\n  });\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: addActivityDialog,\n    1: setAddActivityDialog\n  } = useState(false);\n  const {\n    0: editActivityDialog,\n    1: setEditActivityDialog\n  } = useState(false);\n  const {\n    0: items,\n    1: setItems\n  } = useState([{\n    id: '1',\n    name: 'Telur Ayam',\n    priority: '1'\n  }, {\n    id: '2',\n    name: 'Beras 5kg',\n    priority: '1'\n  }]);\n  const checkedRef = useRef({});\n  const [checkedState, setCheckedState] = React.useState({});\n\n  const fetchDataById = () => {\n    var _router$query;\n\n    const url = ACTIVITY_GROUPS + `/${(_router$query = router.query) === null || _router$query === void 0 ? void 0 : _router$query.id}`;\n\n    const onFetch = async () => {\n      try {\n        const responses = await get(url);\n        setData({\n          title: responses === null || responses === void 0 ? void 0 : responses.title\n        });\n        setLoading(false);\n      } catch (error) {\n        console.error(error);\n        setLoading(true);\n      }\n    };\n\n    onFetch();\n  };\n\n  useEffect(fetchDataById, []); // Create initial state for checkBox\n\n  useEffect(() => {\n    Object.keys(items).map(v => {\n      checkedRef.current[`checked_${items[v].id}`] = false;\n    });\n    setCheckedState(_objectSpread({}, checkedRef.current));\n  }, []);\n\n  const renderChildDialog = () => {\n    if (editActivityDialog) return /*#__PURE__*/_jsxDEV(ActivityPopup, {\n      type: \"edit\",\n      title: \"Edit Activity\",\n      initialValues: {\n        activityName: data === null || data === void 0 ? void 0 : data.title\n      },\n      openDialog: editActivityDialog,\n      setOpenDialog: setEditActivityDialog,\n      onRefetch: fetchDataById\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this);\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 12\n    }, this);\n  };\n\n  const handleCheckChange = event => {\n    console.log('event', event.target.name, checkedState);\n\n    if (checkedState) {\n      setCheckedState(_objectSpread(_objectSpread({}, checkedState), {}, {\n        [event.target.name]: event.target.checked\n      }));\n    }\n  };\n\n  const renderItems = () => {\n    return checkedState && items.map((v, idx) => {\n      const key = `checked_${v.id}`;\n      return /*#__PURE__*/_jsxDEV(FormControlLabel, {\n        control: /*#__PURE__*/_jsxDEV(Checkbox, {\n          checked: checkedState[key],\n          onChange: handleCheckChange,\n          name: key\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this),\n        label: v === null || v === void 0 ? void 0 : v.name\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    role: \"detailActivity\",\n    children: [/*#__PURE__*/_jsxDEV(ActivityHeader, {\n      title: (data === null || data === void 0 ? void 0 : data.title) || \"Loading...\",\n      onClick: console.log,\n      onUpdate: () => setEditActivityDialog(true),\n      children: renderChildDialog()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      alignItems: \"stretch\",\n      children: checkedState && renderItems()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n\nexport default DetailActivity;","map":{"version":3,"sources":["/Users/natserract/Projects/todolist-s/pages/activity/[slug]/index.tsx"],"names":["React","useEffect","useRef","useState","makeStyles","useRouter","styles","ActivityHeader","ActivityPopup","ACTIVITY_GROUPS","get","Grid","FormControlLabel","Checkbox","useStyles","DetailActivity","cs","router","data","setData","title","loading","setLoading","addActivityDialog","setAddActivityDialog","editActivityDialog","setEditActivityDialog","items","setItems","id","name","priority","checkedRef","checkedState","setCheckedState","fetchDataById","url","query","onFetch","responses","error","console","Object","keys","map","v","current","renderChildDialog","activityName","handleCheckChange","event","log","target","checked","renderItems","idx","key"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useRouter } from \"next/router\"\nimport styles from './styles'\nimport ActivityHeader from '../../../components/activity-header';\nimport ActivityPopup from '../../activityPopup';\nimport { ACTIVITY_GROUPS } from '../../../constant/api';\nimport { get } from '../../../api/API';\nimport Grid from '@material-ui/core/Grid';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nconst useStyles = makeStyles(styles)\n\nconst DetailActivity = () => {\n  const cs = useStyles()\n  const router = useRouter()\n\n  const [data, setData] = useState({ title: '' })\n  const [loading, setLoading] = useState(false);\n  const [addActivityDialog, setAddActivityDialog] = useState(false);\n  const [editActivityDialog, setEditActivityDialog] = useState(false);\n\n  const [items, setItems] = useState([\n    {\n      id: '1',\n      name: 'Telur Ayam',\n      priority: '1'\n    },\n    {\n      id: '2',\n      name: 'Beras 5kg',\n      priority: '1'\n    },\n  ])\n  const checkedRef = useRef({})\n  const [checkedState, setCheckedState] = React.useState({});\n\n  const fetchDataById = () => {\n    const url = ACTIVITY_GROUPS + `/${router.query?.id}`\n\n    const onFetch = async () => {\n      try {\n        const responses = await get(url)\n        setData({\n          title: responses?.title\n        })\n        setLoading(false)\n\n      } catch (error) {\n        console.error(error)\n        setLoading(true)\n      }\n    }\n\n    onFetch()\n  }\n\n  useEffect(fetchDataById, []);\n\n  // Create initial state for checkBox\n  useEffect(() => {\n    Object.keys(items).map(v => {\n      checkedRef.current[`checked_${items[v].id}`] = false\n    })\n\n    setCheckedState({ ...checkedRef.current })\n  }, [])\n\n  const renderChildDialog = () => {\n    if (editActivityDialog) return (\n      <ActivityPopup\n        type=\"edit\"\n        title=\"Edit Activity\"\n        initialValues={{ activityName: data?.title }}\n        openDialog={editActivityDialog}\n        setOpenDialog={setEditActivityDialog}\n        onRefetch={fetchDataById}\n      />\n    )\n\n    return <React.Fragment />\n  }\n\n  const handleCheckChange = (event) => {\n    console.log('event', event.target.name, checkedState)\n    if (checkedState) {\n      setCheckedState({ ...checkedState, [event.target.name]: event.target.checked });\n    }\n  };\n\n  const renderItems = () => {\n    return checkedState && items.map((v, idx) => {\n      const key = `checked_${v.id}`\n\n      return (\n        <FormControlLabel\n          key={idx}\n          control={\n            <Checkbox\n              checked={checkedState[key]}\n              onChange={handleCheckChange}\n              name={key}\n            />\n          }\n          label={v?.name}\n        />\n      )\n    })\n  }\n\n  return (\n    <div role=\"detailActivity\">\n      <ActivityHeader\n        title={data?.title || \"Loading...\"}\n        onClick={console.log}\n        onUpdate={() => setEditActivityDialog(true)}\n        children={renderChildDialog()}\n      />\n\n      <Grid container spacing={3} alignItems=\"stretch\">\n        {checkedState && renderItems()}\n      </Grid>\n    </div>\n  )\n}\n\nexport default DetailActivity"]},"metadata":{},"sourceType":"module"}