{"ast":null,"code":"import Axios from 'axios';\nexport const get = route => {\n  const config = {};\n  return Axios.get(route, config).then(response => {\n    let responseData = response.data;\n\n    if (responseData === null) {\n      responseData = [];\n    }\n\n    if (responseData instanceof Object) {\n      return responseData;\n    } else {\n      responseData = [];\n    }\n\n    return responseData;\n  }).catch(error => {\n    if (Axios.isCancel(error)) {\n      // console.log('Request canceled: ', error.message);\n      return;\n    }\n\n    return Promise.reject({\n      status: error.response.status,\n      what: error.response.statusText\n    });\n  });\n};\nexport const getAll = values => {\n  return Axios.all(values).then(Axios.spread((...responses) => {\n    return responses;\n  }));\n};","map":{"version":3,"sources":["/Users/natserract/Projects/todolist-s/api/API.ts"],"names":["Axios","get","route","config","then","response","responseData","data","Object","catch","error","isCancel","Promise","reject","status","what","statusText","getAll","values","all","spread","responses"],"mappings":"AAAA,OAAOA,KAAP,MAAkC,OAAlC;AAEA,OAAO,MAAMC,GAAG,GAAIC,KAAD,IAAmB;AACpC,QAAMC,MAAM,GAAG,EAAf;AAEA,SAAOH,KAAK,CAACC,GAAN,CAAUC,KAAV,EAAiBC,MAAjB,EACJC,IADI,CACEC,QAAD,IAAc;AAClB,QAAIC,YAAY,GAAGD,QAAQ,CAACE,IAA5B;;AAEA,QAAID,YAAY,KAAK,IAArB,EAA2B;AACzBA,MAAAA,YAAY,GAAG,EAAf;AACD;;AAED,QAAIA,YAAY,YAAYE,MAA5B,EAAoC;AAClC,aAAOF,YAAP;AACD,KAFD,MAEO;AACLA,MAAAA,YAAY,GAAG,EAAf;AACD;;AAED,WAAOA,YAAP;AACD,GAfI,EAgBJG,KAhBI,CAgBGC,KAAD,IAAuB;AAC5B,QAAIV,KAAK,CAACW,QAAN,CAAeD,KAAf,CAAJ,EAA2B;AACzB;AACA;AACD;;AAED,WAAOE,OAAO,CAACC,MAAR,CAAe;AACpBC,MAAAA,MAAM,EAAEJ,KAAK,CAACL,QAAN,CAAiBS,MADL;AAEpBC,MAAAA,IAAI,EAAEL,KAAK,CAACL,QAAN,CAAiBW;AAFH,KAAf,CAAP;AAID,GA1BI,CAAP;AA2BD,CA9BM;AAgCP,OAAO,MAAMC,MAAM,GAAOC,MAAJ,IAAmC;AACvD,SAAOlB,KAAK,CAACmB,GAAN,CAAUD,MAAV,EACJd,IADI,CACCJ,KAAK,CAACoB,MAAN,CAAa,CAAC,GAAGC,SAAJ,KAAkB;AACnC,WAAOA,SAAP;AACD,GAFK,CADD,CAAP;AAID,CALM","sourcesContent":["import Axios, { AxiosError } from 'axios'\n\nexport const get = (route: string) => {\n  const config = {}\n\n  return Axios.get(route, config)\n    .then((response) => {\n      let responseData = response.data;\n\n      if (responseData === null) {\n        responseData = []\n      }\n\n      if (responseData instanceof Object) {\n        return responseData\n      } else {\n        responseData = []\n      }\n\n      return responseData\n    })\n    .catch((error: AxiosError) => {\n      if (Axios.isCancel(error)) {\n        // console.log('Request canceled: ', error.message);\n        return;\n      }\n\n      return Promise.reject({\n        status: error.response!!.status,\n        what: error.response!!.statusText,\n      })\n    })\n}\n\nexport const getAll = <T>(values: (T | Promise<T>)[]) => {\n  return Axios.all(values)\n    .then(Axios.spread((...responses) => {\n      return responses\n    }))\n}"]},"metadata":{},"sourceType":"module"}