{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/natserract/Projects/todolist-s/pages/activity.tsx\";\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport ActivityCard from \"../components/activity-card\";\nimport ActivityHeader from \"../components/activity-header\";\nimport Loading from \"../components/loading\";\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport EmptyItems from \"../components/empty-items\";\nimport { get, remove } from '../api/API';\nimport { ACTIVITY_GROUPS } from '../constant/api';\nimport { parseDate } from \"../utils/utils\";\nimport Alert from \"../components/alert\";\nconst useStyles = makeStyles({});\n\nconst Activity = () => {\n  const classes = useStyles();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: visibleAlert,\n    1: setVisibleAlert\n  } = useState(false);\n  const {\n    0: data,\n    1: setData\n  } = useState([]);\n\n  const fetchData = () => {\n    const url = ACTIVITY_GROUPS + '?email=notfound@gmail.com';\n\n    const onFetch = async () => {\n      try {\n        const responses = await get(url);\n        setData(responses === null || responses === void 0 ? void 0 : responses.data);\n        setLoading(false);\n      } catch (error) {\n        setLoading(true);\n      }\n    };\n\n    onFetch();\n  };\n\n  useEffect(fetchData, []);\n  const handleDelete = useCallback(id => {\n    const url = ACTIVITY_GROUPS + `/${id}`;\n    setVisibleAlert(true);\n\n    const onDelete = async () => {\n      setLoading(true);\n\n      try {\n        await remove(url);\n        fetchData();\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    onDelete();\n  }, [fetchData]);\n  const renderActivityItems = useCallback(() => {\n    if (loading) return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 25\n    }, this);\n    if (!data.length) return /*#__PURE__*/_jsxDEV(EmptyItems, {\n      type: \"activity\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this);\n    return data.map((item, index) => /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      sm: 3,\n      children: /*#__PURE__*/_jsxDEV(ActivityCard, {\n        title: item.title,\n        date: parseDate(item.created_at),\n        onDelete: () => handleDelete(item.id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, `item-${item.id}-${index}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this));\n  }, [data, loading]);\n\n  const handleAlert = () => {\n    setVisibleAlert(false);\n  }; // Give a alert timeout\n\n\n  useEffect(() => {\n    let timerFunc = setTimeout(() => {\n      setVisibleAlert(false);\n    }, 5000);\n    return () => clearTimeout(timerFunc);\n  }, [visibleAlert]);\n  console.log('re-rendered times');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    role: \"activity\",\n    children: [/*#__PURE__*/_jsxDEV(ActivityHeader, {\n      onRefetch: fetchData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      alignItems: \"stretch\",\n      children: renderActivityItems()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      fadeIn: visibleAlert,\n      onClick: handleAlert,\n      title: \"Activity berhasil dihapus\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Activity;","map":{"version":3,"sources":["/Users/natserract/Projects/todolist-s/pages/activity.tsx"],"names":["React","useState","useCallback","useEffect","ActivityCard","ActivityHeader","Loading","Grid","makeStyles","EmptyItems","get","remove","ACTIVITY_GROUPS","parseDate","Alert","useStyles","Activity","classes","loading","setLoading","visibleAlert","setVisibleAlert","data","setData","fetchData","url","onFetch","responses","error","handleDelete","id","onDelete","console","renderActivityItems","length","map","item","index","title","created_at","handleAlert","timerFunc","setTimeout","clearTimeout","log"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\"\nimport ActivityCard from \"../components/activity-card\"\nimport ActivityHeader from \"../components/activity-header\"\nimport Loading from \"../components/loading\"\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport EmptyItems from \"../components/empty-items\";\nimport { get, remove } from '../api/API'\nimport { ACTIVITY_GROUPS } from '../constant/api'\nimport { parseDate } from \"../utils/utils\";\nimport Alert from \"../components/alert\";\n\nconst useStyles = makeStyles(({}))\n\nconst Activity = () => {\n  const classes = useStyles()\n  const [loading, setLoading] = useState(true)\n  const [visibleAlert, setVisibleAlert] = useState(false)\n  const [data, setData] = useState([])\n\n  const fetchData = () => {\n    const url = ACTIVITY_GROUPS + '?email=notfound@gmail.com'\n\n    const onFetch = async () => {\n      try {\n        const responses = await get(url)\n        setData(responses?.data)\n        setLoading(false)\n       } catch (error) {\n        setLoading(true)\n       }\n    }\n    \n    onFetch()\n  }\n\n  useEffect(fetchData, []);\n\n  const handleDelete = useCallback((id: string) => {\n    const url = ACTIVITY_GROUPS + `/${id}`\n    setVisibleAlert(true)\n    \n    const onDelete = async () => {\n      setLoading(true)\n\n      try {\n        await remove(url)\n        fetchData()\n       } catch (error) {\n        console.error(error)\n       }\n    }\n    \n    onDelete()\n  }, [fetchData])\n\n  const renderActivityItems = useCallback(() => {\n    if (loading) return <Loading />\n\n    if (!data.length) return (\n      <EmptyItems type=\"activity\" />\n    )\n\n    return data.map((item, index) => \n      <Grid item xs={12} sm={3} key={`item-${item.id}-${index}`}>\n        <ActivityCard\n          title={item.title}\n          date={parseDate(item.created_at)}\n          onDelete={() => handleDelete(item.id)}\n        />\n      </Grid>\n    )\n  }, [data, loading])\n\n  const handleAlert = () => {\n    setVisibleAlert(false)\n  }\n\n  // Give a alert timeout\n  useEffect(() => {\n    let timerFunc = setTimeout(() => {\n      setVisibleAlert(false)\n    }, 5000);\n\n    return () => clearTimeout(timerFunc);\n  }, [visibleAlert])\n\n  console.log('re-rendered times')\n\n  return (\n    <div role=\"activity\">\n      <ActivityHeader onRefetch={fetchData} />\n\n      <Grid container spacing={3} alignItems=\"stretch\">\n        {renderActivityItems()}\n      </Grid>\n\n      {/* {isDelete && <Alert title=\"Activity berhasil dihapus\" /> } */}\n      <Alert \n        fadeIn={visibleAlert} \n        onClick={handleAlert} \n        title=\"Activity berhasil dihapus\" \n      />\n    </div>\n  )\n}\n\nexport default Activity"]},"metadata":{},"sourceType":"module"}