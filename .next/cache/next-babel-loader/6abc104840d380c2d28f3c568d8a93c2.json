{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { get } from '../api/API';\nimport { useData } from '../store/configureStore';\nexport var useRefetch = function useRefetch(url) {\n  _s();\n\n  var _useState = useState(false),\n      doRefetch = _useState[0],\n      setDoRefetch = _useState[1];\n\n  var _useData = useData(),\n      _useData2 = _slicedToArray(_useData, 4),\n      loading = _useData2[0],\n      setLoading = _useData2[1],\n      data = _useData2[2],\n      setData = _useData2[3];\n\n  var onRefetch = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var responses;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return get(url);\n\n            case 3:\n              responses = _context.sent;\n              setData({\n                name: '@@FetchActivity',\n                items: responses === null || responses === void 0 ? void 0 : responses.data\n              });\n              setLoading(false);\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              setLoading(true);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 8]]);\n    }));\n\n    return function onRefetch() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    if (doRefetch) onRefetch();\n  }, [doRefetch]);\n  return {\n    setDoRefetch: setDoRefetch\n  };\n};\n\n_s(useRefetch, \"kzu6tvkmjPECHeS9uFGey49Gyag=\", false, function () {\n  return [useData];\n});","map":{"version":3,"sources":["/Users/natserract/Projects/todolist-s/hooks/useRefetch.ts"],"names":["useEffect","useState","get","useData","useRefetch","url","doRefetch","setDoRefetch","loading","setLoading","data","setData","onRefetch","responses","name","items"],"mappings":";;;;;;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,GAAT,QAAoB,YAApB;AAEA,SAASC,OAAT,QAAwB,yBAAxB;AAEA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,GAAD,EAAiB;AAAA;;AAAA,kBACPJ,QAAQ,CAAC,KAAD,CADD;AAAA,MAClCK,SADkC;AAAA,MACvBC,YADuB;;AAAA,iBAEIJ,OAAO,EAFX;AAAA;AAAA,MAElCK,OAFkC;AAAA,MAEzBC,UAFyB;AAAA,MAEbC,IAFa;AAAA,MAEPC,OAFO;;AAIzC,MAAMC,SAAS;AAAA,wEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEUV,GAAG,CAACG,GAAD,CAFb;;AAAA;AAERQ,cAAAA,SAFQ;AAGdF,cAAAA,OAAO,CAAC;AACNG,gBAAAA,IAAI,EAAE,iBADA;AAENC,gBAAAA,KAAK,EAAEF,SAAF,aAAEA,SAAF,uBAAEA,SAAS,CAAEH;AAFZ,eAAD,CAAP;AAIAD,cAAAA,UAAU,CAAC,KAAD,CAAV;AAPc;AAAA;;AAAA;AAAA;AAAA;AASdA,cAAAA,UAAU,CAAC,IAAD,CAAV;;AATc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAATG,SAAS;AAAA;AAAA;AAAA,KAAf;;AAaAZ,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIM,SAAJ,EAAeM,SAAS;AACzB,GAFQ,EAEN,CAACN,SAAD,CAFM,CAAT;AAIA,SAAO;AACLC,IAAAA,YAAY,EAAZA;AADK,GAAP;AAGD,CAxBM;;GAAMH,U;UAEkCD,O","sourcesContent":["import Axios from 'axios'\nimport { useEffect, useState } from 'react'\nimport { get } from '../api/API'\nimport { ACTIVITY_GROUPS } from '../constant/api'\nimport { useData } from '../store/configureStore'\n\nexport const useRefetch = (url: string) => {\n  const [doRefetch, setDoRefetch] = useState(false)\n  const [loading, setLoading, data, setData] = useData()\n\n  const onRefetch = async () => {\n    try {\n      const responses = await get(url)\n      setData({\n        name: '@@FetchActivity',\n        items: responses?.data\n      })\n      setLoading(false)\n    } catch (error) {\n      setLoading(true)\n    }\n  }\n  \n  useEffect(() => {\n    if (doRefetch) onRefetch()\n  }, [doRefetch])\n\n  return {\n    setDoRefetch,\n  }\n}"]},"metadata":{},"sourceType":"module"}