'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var MuiDatePicker = require('@mui/lab/DatePicker');
var TextField = require('@mui/material/TextField');
var formik = require('formik');
var React = require('react');
var MuiDateTimePicker = require('@mui/lab/DateTimePicker');
var MuiDesktopDatePicker = require('@mui/lab/DesktopDatePicker');
var MuiDesktopDateTimePicker = require('@mui/lab/DesktopDateTimePicker');
var MuiDesktopTimePicker = require('@mui/lab/DesktopTimePicker');
var MuiMobileDatePicker = require('@mui/lab/MobileDatePicker');
var MuiMobileDateTimePicker = require('@mui/lab/MobileDateTimePicker');
var MuiMobileTimePicker = require('@mui/lab/MobileTimePicker');
var MuiStaticDatePicker = require('@mui/lab/StaticDatePicker');
var MuiStaticDateTimePicker = require('@mui/lab/StaticDateTimePicker');
var MuiStaticTimePicker = require('@mui/lab/StaticTimePicker');
var MuiTimePicker = require('@mui/lab/TimePicker');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var MuiDatePicker__default = /*#__PURE__*/_interopDefaultLegacy(MuiDatePicker);
var TextField__default = /*#__PURE__*/_interopDefaultLegacy(TextField);
var React__namespace = /*#__PURE__*/_interopNamespace(React);
var MuiDateTimePicker__default = /*#__PURE__*/_interopDefaultLegacy(MuiDateTimePicker);
var MuiDesktopDatePicker__default = /*#__PURE__*/_interopDefaultLegacy(MuiDesktopDatePicker);
var MuiDesktopDateTimePicker__default = /*#__PURE__*/_interopDefaultLegacy(MuiDesktopDateTimePicker);
var MuiDesktopTimePicker__default = /*#__PURE__*/_interopDefaultLegacy(MuiDesktopTimePicker);
var MuiMobileDatePicker__default = /*#__PURE__*/_interopDefaultLegacy(MuiMobileDatePicker);
var MuiMobileDateTimePicker__default = /*#__PURE__*/_interopDefaultLegacy(MuiMobileDateTimePicker);
var MuiMobileTimePicker__default = /*#__PURE__*/_interopDefaultLegacy(MuiMobileTimePicker);
var MuiStaticDatePicker__default = /*#__PURE__*/_interopDefaultLegacy(MuiStaticDatePicker);
var MuiStaticDateTimePicker__default = /*#__PURE__*/_interopDefaultLegacy(MuiStaticDateTimePicker);
var MuiStaticTimePicker__default = /*#__PURE__*/_interopDefaultLegacy(MuiStaticTimePicker);
var MuiTimePicker__default = /*#__PURE__*/_interopDefaultLegacy(MuiTimePicker);

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function createErrorHandler(fieldError, fieldName, setFieldError) {
    return function (error) {
        if (error !== fieldError && error !== '') {
            setFieldError(fieldName, error ? String(error) : undefined);
        }
    };
}

function fieldToDatePicker(_a) {
    var _b = _a.field; _b.onChange; var field = __rest(_b, ["onChange"]), _c = _a.form, isSubmitting = _c.isSubmitting, touched = _c.touched, errors = _c.errors, setFieldValue = _c.setFieldValue, setFieldError = _c.setFieldError, setFieldTouched = _c.setFieldTouched, _d = _a.textField, _e = _d === void 0 ? {} : _d, helperText = _e.helperText, onBlur = _e.onBlur, textField = __rest(_e, ["helperText", "onBlur"]), disabled = _a.disabled, label = _a.label, onChange = _a.onChange, onError = _a.onError, renderInput = _a.renderInput, props = __rest(_a, ["field", "form", "textField", "disabled", "label", "onChange", "onError", "renderInput"]);
    var fieldError = formik.getIn(errors, field.name);
    var showError = formik.getIn(touched, field.name) && !!fieldError;
    return __assign(__assign({ renderInput: renderInput !== null && renderInput !== void 0 ? renderInput : (function (params) { return (React__namespace.createElement(TextField__default["default"], __assign({}, params, { error: showError, helperText: showError ? fieldError : helperText, label: label, onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function () {
                setFieldTouched(field.name, true, true);
            } }, textField))); }), disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting, onChange: onChange !== null && onChange !== void 0 ? onChange : function (date) {
            setFieldTouched(field.name, true, false);
            setFieldValue(field.name, date, true);
        }, onError: onError !== null && onError !== void 0 ? onError : createErrorHandler(fieldError, field.name, setFieldError) }, field), props);
}
function DatePicker(_a) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (React__namespace.createElement(MuiDatePicker__default["default"], __assign({}, fieldToDatePicker(props)), children));
}
DatePicker.displayName = 'FormikMUIDatePicker';

function fieldToDateTimePicker(_a) {
    var _b = _a.field; _b.onChange; var field = __rest(_b, ["onChange"]), _c = _a.form, isSubmitting = _c.isSubmitting, touched = _c.touched, errors = _c.errors, setFieldValue = _c.setFieldValue, setFieldError = _c.setFieldError, setFieldTouched = _c.setFieldTouched, _d = _a.textField, _e = _d === void 0 ? {} : _d, helperText = _e.helperText, onBlur = _e.onBlur, textField = __rest(_e, ["helperText", "onBlur"]), disabled = _a.disabled, label = _a.label, onChange = _a.onChange, onError = _a.onError, renderInput = _a.renderInput, props = __rest(_a, ["field", "form", "textField", "disabled", "label", "onChange", "onError", "renderInput"]);
    var fieldError = formik.getIn(errors, field.name);
    var showError = formik.getIn(touched, field.name) && !!fieldError;
    return __assign(__assign({ renderInput: renderInput !== null && renderInput !== void 0 ? renderInput : (function (params) { return (React__namespace.createElement(TextField__default["default"], __assign({}, params, { error: showError, helperText: showError ? fieldError : helperText, label: label, onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function () {
                setFieldTouched(field.name, true, true);
            } }, textField))); }), disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting, onChange: onChange !== null && onChange !== void 0 ? onChange : function (date) {
            setFieldTouched(field.name, true, false);
            setFieldValue(field.name, date, true);
        }, onError: onError !== null && onError !== void 0 ? onError : createErrorHandler(fieldError, field.name, setFieldError) }, field), props);
}
function DateTimePicker(_a) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (React__namespace.createElement(MuiDateTimePicker__default["default"], __assign({}, fieldToDateTimePicker(props)), children));
}
DateTimePicker.displayName = 'FormikMUIDateTimePicker';

function fieldToDesktopDatePicker(_a) {
    var _b = _a.field; _b.onChange; var field = __rest(_b, ["onChange"]), _c = _a.form, isSubmitting = _c.isSubmitting, touched = _c.touched, errors = _c.errors, setFieldValue = _c.setFieldValue, setFieldError = _c.setFieldError, setFieldTouched = _c.setFieldTouched, _d = _a.textField, _e = _d === void 0 ? {} : _d, helperText = _e.helperText, onBlur = _e.onBlur, textField = __rest(_e, ["helperText", "onBlur"]), disabled = _a.disabled, label = _a.label, onChange = _a.onChange, onError = _a.onError, renderInput = _a.renderInput, props = __rest(_a, ["field", "form", "textField", "disabled", "label", "onChange", "onError", "renderInput"]);
    var fieldError = formik.getIn(errors, field.name);
    var showError = formik.getIn(touched, field.name) && !!fieldError;
    return __assign(__assign({ renderInput: renderInput !== null && renderInput !== void 0 ? renderInput : (function (params) { return (React__namespace.createElement(TextField__default["default"], __assign({}, params, { error: showError, helperText: showError ? fieldError : helperText, label: label, onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function () {
                setFieldTouched(field.name, true, true);
            } }, textField))); }), disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting, onChange: onChange !== null && onChange !== void 0 ? onChange : function (date) {
            setFieldTouched(field.name, true, false);
            setFieldValue(field.name, date, true);
        }, onError: onError !== null && onError !== void 0 ? onError : createErrorHandler(fieldError, field.name, setFieldError) }, field), props);
}
function DesktopDatePicker(_a) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (React__namespace.createElement(MuiDesktopDatePicker__default["default"], __assign({}, fieldToDesktopDatePicker(props)), children));
}
DesktopDatePicker.displayName = 'FormikMUIDesktopDatePicker';

function fieldToDesktopDateTimePicker(_a) {
    var _b = _a.field; _b.onChange; var field = __rest(_b, ["onChange"]), _c = _a.form, isSubmitting = _c.isSubmitting, touched = _c.touched, errors = _c.errors, setFieldValue = _c.setFieldValue, setFieldError = _c.setFieldError, setFieldTouched = _c.setFieldTouched, _d = _a.textField, _e = _d === void 0 ? {} : _d, helperText = _e.helperText, onBlur = _e.onBlur, textField = __rest(_e, ["helperText", "onBlur"]), disabled = _a.disabled, label = _a.label, onChange = _a.onChange, onError = _a.onError, renderInput = _a.renderInput, props = __rest(_a, ["field", "form", "textField", "disabled", "label", "onChange", "onError", "renderInput"]);
    var fieldError = formik.getIn(errors, field.name);
    var showError = formik.getIn(touched, field.name) && !!fieldError;
    return __assign(__assign({ renderInput: renderInput !== null && renderInput !== void 0 ? renderInput : (function (params) { return (React__namespace.createElement(TextField__default["default"], __assign({}, params, { error: showError, helperText: showError ? fieldError : helperText, label: label, onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function () {
                setFieldTouched(field.name, true, true);
            } }, textField))); }), disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting, onChange: onChange !== null && onChange !== void 0 ? onChange : function (date) {
            setFieldTouched(field.name, true, false);
            setFieldValue(field.name, date, true);
        }, onError: onError !== null && onError !== void 0 ? onError : createErrorHandler(fieldError, field.name, setFieldError) }, field), props);
}
function DesktopDateTimePicker(_a) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (React__namespace.createElement(MuiDesktopDateTimePicker__default["default"], __assign({}, fieldToDesktopDateTimePicker(props)), children));
}
DesktopDateTimePicker.displayName = 'FormikMUIDesktopDateTimePicker';

function fieldToDesktopTimePicker(_a) {
    var _b = _a.field; _b.onChange; var field = __rest(_b, ["onChange"]), _c = _a.form, isSubmitting = _c.isSubmitting, touched = _c.touched, errors = _c.errors, setFieldValue = _c.setFieldValue, setFieldError = _c.setFieldError, setFieldTouched = _c.setFieldTouched, _d = _a.textField, _e = _d === void 0 ? {} : _d, helperText = _e.helperText, onBlur = _e.onBlur, textField = __rest(_e, ["helperText", "onBlur"]), disabled = _a.disabled, label = _a.label, onChange = _a.onChange, onError = _a.onError, renderInput = _a.renderInput, props = __rest(_a, ["field", "form", "textField", "disabled", "label", "onChange", "onError", "renderInput"]);
    var fieldError = formik.getIn(errors, field.name);
    var showError = formik.getIn(touched, field.name) && !!fieldError;
    return __assign(__assign({ renderInput: renderInput !== null && renderInput !== void 0 ? renderInput : (function (params) { return (React__namespace.createElement(TextField__default["default"], __assign({}, params, { error: showError, helperText: showError ? fieldError : helperText, label: label, onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function () {
                setFieldTouched(field.name, true, true);
            } }, textField))); }), disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting, onChange: onChange !== null && onChange !== void 0 ? onChange : function (date) {
            setFieldTouched(field.name, true, false);
            setFieldValue(field.name, date, true);
        }, onError: onError !== null && onError !== void 0 ? onError : createErrorHandler(fieldError, field.name, setFieldError) }, field), props);
}
function DesktopTimePicker(_a) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (React__namespace.createElement(MuiDesktopTimePicker__default["default"], __assign({}, fieldToDesktopTimePicker(props)), children));
}
DesktopTimePicker.displayName = 'FormikMUIDesktopTimePicker';

function fieldToMobileDatePicker(_a) {
    var _b = _a.field; _b.onChange; var field = __rest(_b, ["onChange"]), _c = _a.form, isSubmitting = _c.isSubmitting, touched = _c.touched, errors = _c.errors, setFieldValue = _c.setFieldValue, setFieldError = _c.setFieldError, setFieldTouched = _c.setFieldTouched, _d = _a.textField, _e = _d === void 0 ? {} : _d, helperText = _e.helperText, onBlur = _e.onBlur, textField = __rest(_e, ["helperText", "onBlur"]), disabled = _a.disabled, label = _a.label, onChange = _a.onChange, onError = _a.onError, renderInput = _a.renderInput, props = __rest(_a, ["field", "form", "textField", "disabled", "label", "onChange", "onError", "renderInput"]);
    var fieldError = formik.getIn(errors, field.name);
    var showError = formik.getIn(touched, field.name) && !!fieldError;
    return __assign(__assign({ renderInput: renderInput !== null && renderInput !== void 0 ? renderInput : (function (params) { return (React__namespace.createElement(TextField__default["default"], __assign({}, params, { error: showError, helperText: showError ? fieldError : helperText, label: label, onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function () {
                setFieldTouched(field.name, true, true);
            } }, textField))); }), disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting, onChange: onChange !== null && onChange !== void 0 ? onChange : function (date) {
            setFieldTouched(field.name, true, false);
            setFieldValue(field.name, date, true);
        }, onError: onError !== null && onError !== void 0 ? onError : createErrorHandler(fieldError, field.name, setFieldError) }, field), props);
}
function MobileDatePicker(_a) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (React__namespace.createElement(MuiMobileDatePicker__default["default"], __assign({}, fieldToMobileDatePicker(props)), children));
}
MobileDatePicker.displayName = 'FormikMUIMobileDatePicker';

function fieldToMobileDateTimePicker(_a) {
    var _b = _a.field; _b.onChange; var field = __rest(_b, ["onChange"]), _c = _a.form, isSubmitting = _c.isSubmitting, touched = _c.touched, errors = _c.errors, setFieldValue = _c.setFieldValue, setFieldError = _c.setFieldError, setFieldTouched = _c.setFieldTouched, _d = _a.textField, _e = _d === void 0 ? {} : _d, helperText = _e.helperText, onBlur = _e.onBlur, textField = __rest(_e, ["helperText", "onBlur"]), disabled = _a.disabled, label = _a.label, onChange = _a.onChange, onError = _a.onError, renderInput = _a.renderInput, props = __rest(_a, ["field", "form", "textField", "disabled", "label", "onChange", "onError", "renderInput"]);
    var fieldError = formik.getIn(errors, field.name);
    var showError = formik.getIn(touched, field.name) && !!fieldError;
    return __assign(__assign({ renderInput: renderInput !== null && renderInput !== void 0 ? renderInput : (function (params) { return (React__namespace.createElement(TextField__default["default"], __assign({}, params, { error: showError, helperText: showError ? fieldError : helperText, label: label, onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function () {
                setFieldTouched(field.name, true, true);
            } }, textField))); }), disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting, onChange: onChange !== null && onChange !== void 0 ? onChange : function (date) {
            setFieldTouched(field.name, true, false);
            setFieldValue(field.name, date, true);
        }, onError: onError !== null && onError !== void 0 ? onError : createErrorHandler(fieldError, field.name, setFieldError) }, field), props);
}
function MobileDateTimePicker(_a) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (React__namespace.createElement(MuiMobileDateTimePicker__default["default"], __assign({}, fieldToMobileDateTimePicker(props)), children));
}
MobileDateTimePicker.displayName = 'FormikMUIMobileDateTimePicker';

function fieldToMobileTimePicker(_a) {
    var _b = _a.field; _b.onChange; var field = __rest(_b, ["onChange"]), _c = _a.form, isSubmitting = _c.isSubmitting, touched = _c.touched, errors = _c.errors, setFieldValue = _c.setFieldValue, setFieldError = _c.setFieldError, setFieldTouched = _c.setFieldTouched, _d = _a.textField, _e = _d === void 0 ? {} : _d, helperText = _e.helperText, onBlur = _e.onBlur, textField = __rest(_e, ["helperText", "onBlur"]), disabled = _a.disabled, label = _a.label, onChange = _a.onChange, onError = _a.onError, renderInput = _a.renderInput, props = __rest(_a, ["field", "form", "textField", "disabled", "label", "onChange", "onError", "renderInput"]);
    var fieldError = formik.getIn(errors, field.name);
    var showError = formik.getIn(touched, field.name) && !!fieldError;
    return __assign(__assign({ renderInput: renderInput !== null && renderInput !== void 0 ? renderInput : (function (params) { return (React__namespace.createElement(TextField__default["default"], __assign({}, params, { error: showError, helperText: showError ? fieldError : helperText, label: label, onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function () {
                setFieldTouched(field.name, true, true);
            } }, textField))); }), disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting, onChange: onChange !== null && onChange !== void 0 ? onChange : function (date) {
            setFieldTouched(field.name, true, false);
            setFieldValue(field.name, date, true);
        }, onError: onError !== null && onError !== void 0 ? onError : createErrorHandler(fieldError, field.name, setFieldError) }, field), props);
}
function MobileTimePicker(_a) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (React__namespace.createElement(MuiMobileTimePicker__default["default"], __assign({}, fieldToMobileTimePicker(props)), children));
}
MobileTimePicker.displayName = 'FormikMUIMobileTimePicker';

function fieldToStaticDatePicker(_a) {
    var _b = _a.field; _b.onChange; var field = __rest(_b, ["onChange"]), _c = _a.form, isSubmitting = _c.isSubmitting, touched = _c.touched, errors = _c.errors, setFieldValue = _c.setFieldValue, setFieldError = _c.setFieldError, setFieldTouched = _c.setFieldTouched, _d = _a.textField, _e = _d === void 0 ? {} : _d, helperText = _e.helperText, onBlur = _e.onBlur, textField = __rest(_e, ["helperText", "onBlur"]), disabled = _a.disabled, label = _a.label, onChange = _a.onChange, onError = _a.onError, renderInput = _a.renderInput, props = __rest(_a, ["field", "form", "textField", "disabled", "label", "onChange", "onError", "renderInput"]);
    var fieldError = formik.getIn(errors, field.name);
    var showError = formik.getIn(touched, field.name) && !!fieldError;
    return __assign(__assign({ renderInput: renderInput !== null && renderInput !== void 0 ? renderInput : (function (params) { return (React__namespace.createElement(TextField__default["default"], __assign({}, params, { error: showError, helperText: showError ? fieldError : helperText, label: label, onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function () {
                setFieldTouched(field.name, true, true);
            } }, textField))); }), disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting, onChange: onChange !== null && onChange !== void 0 ? onChange : function (date) {
            setFieldTouched(field.name, true, false);
            setFieldValue(field.name, date, true);
        }, onError: onError !== null && onError !== void 0 ? onError : createErrorHandler(fieldError, field.name, setFieldError) }, field), props);
}
function StaticDatePicker(props) {
    return React__namespace.createElement(MuiStaticDatePicker__default["default"], __assign({}, fieldToStaticDatePicker(props)));
}
StaticDatePicker.displayName = 'FormikMUIStaticDatePicker';

function fieldToStaticDateTimePicker(_a) {
    var _b = _a.field; _b.onChange; var field = __rest(_b, ["onChange"]), _c = _a.form, isSubmitting = _c.isSubmitting, touched = _c.touched, errors = _c.errors, setFieldValue = _c.setFieldValue, setFieldError = _c.setFieldError, setFieldTouched = _c.setFieldTouched, _d = _a.textField, _e = _d === void 0 ? {} : _d, helperText = _e.helperText, onBlur = _e.onBlur, textField = __rest(_e, ["helperText", "onBlur"]), disabled = _a.disabled, label = _a.label, onChange = _a.onChange, onError = _a.onError, renderInput = _a.renderInput, props = __rest(_a, ["field", "form", "textField", "disabled", "label", "onChange", "onError", "renderInput"]);
    var fieldError = formik.getIn(errors, field.name);
    var showError = formik.getIn(touched, field.name) && !!fieldError;
    return __assign(__assign({ renderInput: renderInput !== null && renderInput !== void 0 ? renderInput : (function (params) { return (React__namespace.createElement(TextField__default["default"], __assign({}, params, { error: showError, helperText: showError ? fieldError : helperText, label: label, onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function () {
                setFieldTouched(field.name, true, true);
            } }, textField))); }), disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting, onChange: onChange !== null && onChange !== void 0 ? onChange : function (date) {
            setFieldTouched(field.name, true, false);
            setFieldValue(field.name, date, true);
        }, onError: onError !== null && onError !== void 0 ? onError : createErrorHandler(fieldError, field.name, setFieldError) }, field), props);
}
function StaticDateTimePicker(props) {
    return React__namespace.createElement(MuiStaticDateTimePicker__default["default"], __assign({}, fieldToStaticDateTimePicker(props)));
}
StaticDateTimePicker.displayName = 'FormikMUIStaticDateTimePicker';

function fieldToStaticTimePicker(_a) {
    var _b = _a.field; _b.onChange; var field = __rest(_b, ["onChange"]), _c = _a.form, isSubmitting = _c.isSubmitting, touched = _c.touched, errors = _c.errors, setFieldValue = _c.setFieldValue, setFieldError = _c.setFieldError, setFieldTouched = _c.setFieldTouched, _d = _a.textField, _e = _d === void 0 ? {} : _d, helperText = _e.helperText, onBlur = _e.onBlur, textField = __rest(_e, ["helperText", "onBlur"]), disabled = _a.disabled, label = _a.label, onChange = _a.onChange, onError = _a.onError, renderInput = _a.renderInput, props = __rest(_a, ["field", "form", "textField", "disabled", "label", "onChange", "onError", "renderInput"]);
    var fieldError = formik.getIn(errors, field.name);
    var showError = formik.getIn(touched, field.name) && !!fieldError;
    return __assign(__assign({ renderInput: renderInput !== null && renderInput !== void 0 ? renderInput : (function (params) { return (React__namespace.createElement(TextField__default["default"], __assign({}, params, { error: showError, helperText: showError ? fieldError : helperText, label: label, onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function () {
                setFieldTouched(field.name, true, true);
            } }, textField))); }), disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting, onChange: onChange !== null && onChange !== void 0 ? onChange : function (date) {
            setFieldTouched(field.name, true, false);
            setFieldValue(field.name, date, true);
        }, onError: onError !== null && onError !== void 0 ? onError : createErrorHandler(fieldError, field.name, setFieldError) }, field), props);
}
function StaticTimePicker(props) {
    return React__namespace.createElement(MuiStaticTimePicker__default["default"], __assign({}, fieldToStaticTimePicker(props)));
}
StaticTimePicker.displayName = 'FormikMUIStaticTimePicker';

function fieldToTimePicker(_a) {
    var _b = _a.field; _b.onChange; _b.onBlur; var field = __rest(_b, ["onChange", "onBlur"]), _c = _a.form, isSubmitting = _c.isSubmitting, touched = _c.touched, errors = _c.errors, setFieldValue = _c.setFieldValue, setFieldError = _c.setFieldError, setFieldTouched = _c.setFieldTouched, _d = _a.textField, _e = _d === void 0 ? {} : _d, helperText = _e.helperText, onBlur = _e.onBlur, textField = __rest(_e, ["helperText", "onBlur"]), disabled = _a.disabled, label = _a.label, onChange = _a.onChange, onError = _a.onError, renderInput = _a.renderInput, props = __rest(_a, ["field", "form", "textField", "disabled", "label", "onChange", "onError", "renderInput"]);
    var fieldError = formik.getIn(errors, field.name);
    var showError = formik.getIn(touched, field.name) && !!fieldError;
    return __assign(__assign({ renderInput: renderInput !== null && renderInput !== void 0 ? renderInput : (function (params) { return (React__namespace.createElement(TextField__default["default"], __assign({}, params, { error: showError, helperText: showError ? fieldError : helperText, label: label, onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function () {
                setFieldTouched(field.name, true, true);
            } }, textField))); }), disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting, onChange: onChange !== null && onChange !== void 0 ? onChange : function (date) {
            setFieldTouched(field.name, true, false);
            setFieldValue(field.name, date, true);
        }, onError: onError !== null && onError !== void 0 ? onError : createErrorHandler(fieldError, field.name, setFieldError) }, field), props);
}
function TimePicker(_a) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (React__namespace.createElement(MuiTimePicker__default["default"], __assign({}, fieldToTimePicker(props)), children));
}
TimePicker.displayName = 'FormikMUITimePicker';

exports.DatePicker = DatePicker;
exports.DateTimePicker = DateTimePicker;
exports.DesktopDatePicker = DesktopDatePicker;
exports.DesktopDateTimePicker = DesktopDateTimePicker;
exports.DesktopTimePicker = DesktopTimePicker;
exports.MobileDatePicker = MobileDatePicker;
exports.MobileDateTimePicker = MobileDateTimePicker;
exports.MobileTimePicker = MobileTimePicker;
exports.StaticDatePicker = StaticDatePicker;
exports.StaticDateTimePicker = StaticDateTimePicker;
exports.StaticTimePicker = StaticTimePicker;
exports.TimePicker = TimePicker;
exports.fieldToDatePicker = fieldToDatePicker;
exports.fieldToDateTimePicker = fieldToDateTimePicker;
exports.fieldToDesktopDatePicker = fieldToDesktopDatePicker;
exports.fieldToDesktopDateTimePicker = fieldToDesktopDateTimePicker;
exports.fieldToDesktopTimePicker = fieldToDesktopTimePicker;
exports.fieldToMobileDatePicker = fieldToMobileDatePicker;
exports.fieldToMobileDateTimePicker = fieldToMobileDateTimePicker;
exports.fieldToMobileTimePicker = fieldToMobileTimePicker;
exports.fieldToStaticDatePicker = fieldToStaticDatePicker;
exports.fieldToStaticDateTimePicker = fieldToStaticDateTimePicker;
exports.fieldToStaticTimePicker = fieldToStaticTimePicker;
exports.fieldToTimePicker = fieldToTimePicker;
//# sourceMappingURL=main.js.map
